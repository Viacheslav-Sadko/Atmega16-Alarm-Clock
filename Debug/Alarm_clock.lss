
Alarm_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  00000be6  00000c7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000d6  008000d6  00000cf0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001879  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aba  00000000  00000000  00002791  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d06  00000000  00000000  0000324b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00003f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000681  00000000  00000000  0000420c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085b  00000000  00000000  0000488d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000050e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3d       	cpi	r26, 0xD6	; 214
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ed       	ldi	r26, 0xD6	; 214
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3d       	cpi	r26, 0xDC	; 220
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <main>
  8a:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_init>:
#include <avr/io.h>
#include <util/delay.h>
#include "I2C.h"

void I2C_init(){
	TWBR = 0x40;
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	80 b9       	out	0x00, r24	; 0
  96:	08 95       	ret

00000098 <LCD_Send_Half_Byte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	90 e1       	ldi	r25, 0x10	; 16
  9a:	9a 95       	dec	r25
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_Send_Half_Byte+0x2>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_Send_Half_Byte+0x8>
	LCD_Send_Byte(0x6, 0); 
	_delay_ms(1);
}
void LCD_Send_Half_Byte(uint8_t half_byte) {
	_delay_us(50);
	half_byte = (half_byte << 2) & 0x3C;
  a0:	88 0f       	add	r24, r24
  a2:	88 0f       	add	r24, r24
	Enable_1;
  a4:	ae 9a       	sbi	0x15, 6	; 21
	PORTC &= 0xC3;
  a6:	95 b3       	in	r25, 0x15	; 21
  a8:	93 7c       	andi	r25, 0xC3	; 195
  aa:	95 bb       	out	0x15, r25	; 21
	PORTC |= half_byte;
  ac:	95 b3       	in	r25, 0x15	; 21
  ae:	8c 73       	andi	r24, 0x3C	; 60
  b0:	89 2b       	or	r24, r25
  b2:	85 bb       	out	0x15, r24	; 21
	Enable_0;
  b4:	ae 98       	cbi	0x15, 6	; 21
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	8a 95       	dec	r24
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_Send_Half_Byte+0x20>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_Send_Half_Byte+0x26>
  be:	08 95       	ret

000000c0 <LCD_Send_Byte>:
	_delay_us(50);
}

void LCD_Send_Byte(uint8_t byte, uint8_t mode) {
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
	if (mode == 0) RS_0;
  c4:	61 11       	cpse	r22, r1
  c6:	02 c0       	rjmp	.+4      	; 0xcc <LCD_Send_Byte+0xc>
  c8:	af 98       	cbi	0x15, 7	; 21
  ca:	01 c0       	rjmp	.+2      	; 0xce <LCD_Send_Byte+0xe>
	else RS_1;
  cc:	af 9a       	sbi	0x15, 7	; 21

	uint8_t half_byte_high = (byte >> 4) & 0x0F;
	uint8_t half_byte_low = byte & 0x0F;
	LCD_Send_Half_Byte(half_byte_high);
  ce:	8c 2f       	mov	r24, r28
  d0:	82 95       	swap	r24
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
	LCD_Send_Half_Byte(half_byte_low);
  d8:	8c 2f       	mov	r24, r28
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
}
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	85 ea       	ldi	r24, 0xA5	; 165
  e6:	9e e0       	ldi	r25, 0x0E	; 14
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_Init+0x4>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_Init+0xa>
  ee:	00 00       	nop
#include "LCD.h"

void LCD_Init(){
	_delay_ms(15);
	LCD_Send_Half_Byte(0x3);
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
  f6:	87 ee       	ldi	r24, 0xE7	; 231
  f8:	93 e0       	ldi	r25, 0x03	; 3
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Init+0x16>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_Init+0x1c>
 100:	00 00       	nop
	_delay_ms(4);
	LCD_Send_Half_Byte(0x3);
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
 108:	87 ea       	ldi	r24, 0xA7	; 167
 10a:	91 e6       	ldi	r25, 0x61	; 97
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_Init+0x28>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_Init+0x2e>
 112:	00 00       	nop
	_delay_ms(100);
	LCD_Send_Half_Byte(0x3);
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
 11a:	89 ef       	ldi	r24, 0xF9	; 249
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_Init+0x3a>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_Init+0x40>
 124:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Half_Byte(0x2);
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
 12c:	89 ef       	ldi	r24, 0xF9	; 249
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_Init+0x4c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_Init+0x52>
 136:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Byte(0x28, 0);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	88 e2       	ldi	r24, 0x28	; 40
 13c:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_Init+0x60>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_Init+0x66>
 14a:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Byte(0xC, 0); 
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	8c e0       	ldi	r24, 0x0C	; 12
 150:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
 154:	89 ef       	ldi	r24, 0xF9	; 249
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_Init+0x74>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_Init+0x7a>
 15e:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Byte(0x6, 0); 
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
 168:	89 ef       	ldi	r24, 0xF9	; 249
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Init+0x88>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Init+0x8e>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <LCD_Send_Char>:
	LCD_Send_Half_Byte(half_byte_high);
	LCD_Send_Half_Byte(half_byte_low);
}

void LCD_Send_Char(uint8_t byte){
	LCD_Send_Byte(byte, 1);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
 17c:	08 95       	ret

0000017e <LCD_Set_Cursor>:
}
void LCD_Set_Cursor(uint8_t horizontal, uint8_t vertical){
	uint8_t position = 0;
	position = (0x40 * vertical + horizontal)|0x80;
	LCD_Send_Byte(position, 0);
 17e:	90 e4       	ldi	r25, 0x40	; 64
 180:	69 9f       	mul	r22, r25
 182:	80 0d       	add	r24, r0
 184:	11 24       	eor	r1, r1
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
 18e:	08 95       	ret

00000190 <LCD_Clear>:
}
void LCD_Clear(){
	LCD_Send_Byte(0x1, 0);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	86 e7       	ldi	r24, 0x76	; 118
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Clear+0xc>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_Clear+0x12>
 1a2:	00 00       	nop
 1a4:	08 95       	ret

000001a6 <LCD_String>:
	_delay_us(1500);
}

void LCD_String(char* message){
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ec 01       	movw	r28, r24
	for(int i = 0; message[i] != '\0'; i++){
 1ac:	88 81       	ld	r24, Y
 1ae:	88 23       	and	r24, r24
 1b0:	31 f0       	breq	.+12     	; 0x1be <LCD_String+0x18>
 1b2:	21 96       	adiw	r28, 0x01	; 1
		LCD_Send_Char(message[i]);
 1b4:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_Send_Char>
	LCD_Send_Byte(0x1, 0);
	_delay_us(1500);
}

void LCD_String(char* message){
	for(int i = 0; message[i] != '\0'; i++){
 1b8:	89 91       	ld	r24, Y+
 1ba:	81 11       	cpse	r24, r1
 1bc:	fb cf       	rjmp	.-10     	; 0x1b4 <LCD_String+0xe>
		LCD_Send_Char(message[i]);
	}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <GPIO_Init>:
	UART_init(51);
}

void GPIO_Init(){
	//Configuring Led
	DDRD  |=   (1 << Led_Blue)|(1 << Led_Red);
 1c4:	81 b3       	in	r24, 0x11	; 17
 1c6:	80 66       	ori	r24, 0x60	; 96
 1c8:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~((1 << Led_Blue)|(1 << Led_Red));
 1ca:	82 b3       	in	r24, 0x12	; 18
 1cc:	8f 79       	andi	r24, 0x9F	; 159
 1ce:	82 bb       	out	0x12, r24	; 18
	//Configuring Buttons
	DDRB  &= ~((1 << Button_Ok)|(1 << Button_Set));
 1d0:	87 b3       	in	r24, 0x17	; 23
 1d2:	8c 7f       	andi	r24, 0xFC	; 252
 1d4:	87 bb       	out	0x17, r24	; 23
	PORTB |=  (1 << Button_Ok)|(1 << Button_Set);
 1d6:	88 b3       	in	r24, 0x18	; 24
 1d8:	83 60       	ori	r24, 0x03	; 3
 1da:	88 bb       	out	0x18, r24	; 24
	//Configuring Buzzer
	DDRA  |=  (1 << Buzzer);
 1dc:	d0 9a       	sbi	0x1a, 0	; 26
	PORTA &= ~(1 << Buzzer);
 1de:	d8 98       	cbi	0x1b, 0	; 27
	//Configuring LCD pins
	DDRC  =  255;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	84 bb       	out	0x14, r24	; 20
	PORTC =  0;
 1e4:	15 ba       	out	0x15, r1	; 21
 1e6:	08 95       	ret

000001e8 <MCU_Init>:
#include "MCU_Init.h"
#include "Timer.h"
#include "LCD.h"

void MCU_Init(){
	Timer_Init();
 1e8:	0e 94 1b 01 	call	0x236	; 0x236 <Timer_Init>
	GPIO_Init();
 1ec:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <GPIO_Init>
	LCD_Init();
 1f0:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_Init>
	I2C_init();
 1f4:	0e 94 49 00 	call	0x92	; 0x92 <I2C_init>
	UART_init(51);
 1f8:	83 e3       	ldi	r24, 0x33	; 51
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 28 01 	call	0x250	; 0x250 <UART_init>
 200:	08 95       	ret

00000202 <__vector_6>:
#include "Timer.h"
volatile uint8_t timer_flag = 0;
ISR(TIMER1_COMPA_vect){
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
	if(timer_flag == 0)
 20e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 212:	81 11       	cpse	r24, r1
 214:	04 c0       	rjmp	.+8      	; 0x21e <__vector_6+0x1c>
		timer_flag = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
 21c:	06 c0       	rjmp	.+12     	; 0x22a <__vector_6+0x28>
	else if(timer_flag == 1)
 21e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	11 f4       	brne	.+4      	; 0x22a <__vector_6+0x28>
		timer_flag = 0;
 226:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__data_end>
}
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <Timer_Init>:

void Timer_Init(){
	TCCR1B |= (1 << WGM12);
 236:	8e b5       	in	r24, 0x2e	; 46
 238:	88 60       	ori	r24, 0x08	; 8
 23a:	8e bd       	out	0x2e, r24	; 46
	TIMSK  |= (1 << OCIE1A);
 23c:	89 b7       	in	r24, 0x39	; 57
 23e:	80 61       	ori	r24, 0x10	; 16
 240:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0x00;
 242:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0xFF;
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << CS12);
 248:	8e b5       	in	r24, 0x2e	; 46
 24a:	84 60       	ori	r24, 0x04	; 4
 24c:	8e bd       	out	0x2e, r24	; 46
 24e:	08 95       	ret

00000250 <UART_init>:
#include "UART.h"

void UART_init(unsigned int speed){
	UBRRH = (unsigned char)(speed>>8);
 250:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)speed;
 252:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1 << RXEN)|(1 << TXEN);
 254:	88 e1       	ldi	r24, 0x18	; 24
 256:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (1 << RXCIE);
 258:	57 9a       	sbi	0x0a, 7	; 10
	UCSRC = (1 << URSEL)|(1 << USBS)|(1 << UCSZ1)|(1 << UCSZ0);
 25a:	8e e8       	ldi	r24, 0x8E	; 142
 25c:	80 bd       	out	0x20, r24	; 32
 25e:	08 95       	ret

00000260 <Alarm_Get_Current_Value_Ptr>:
		*value_ptr = 0;
	}
}


void Save_Setting(){
 260:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <selected_parameter>
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	19 f4       	brne	.+6      	; 0x26e <Alarm_Get_Current_Value_Ptr+0xe>
 268:	87 ed       	ldi	r24, 0xD7	; 215
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	08 95       	ret
 26e:	88 ed       	ldi	r24, 0xD8	; 216
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	08 95       	ret

00000274 <Get_Current_Value_Ptr>:
 274:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <selected_parameter>
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	19 f4       	brne	.+6      	; 0x282 <Get_Current_Value_Ptr+0xe>
 27c:	81 e6       	ldi	r24, 0x61	; 97
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	08 95       	ret
 282:	82 e6       	ldi	r24, 0x62	; 98
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	08 95       	ret

00000288 <Get_Current_Value>:
 288:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <selected_parameter>
 28c:	88 23       	and	r24, r24
 28e:	19 f0       	breq	.+6      	; 0x296 <Get_Current_Value+0xe>
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	21 f0       	breq	.+8      	; 0x29c <Get_Current_Value+0x14>
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <Get_Current_Value+0x1a>
 296:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hours>
 29a:	08 95       	ret
 29c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <minutes>
 2a0:	08 95       	ret
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	08 95       	ret

000002a6 <Alarm_Get_Current_Value>:
 2a6:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <selected_parameter>
 2aa:	88 23       	and	r24, r24
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <Alarm_Get_Current_Value+0xe>
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	21 f0       	breq	.+8      	; 0x2ba <Alarm_Get_Current_Value+0x14>
 2b2:	06 c0       	rjmp	.+12     	; 0x2c0 <Alarm_Get_Current_Value+0x1a>
 2b4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <alarm_hours>
 2b8:	08 95       	ret
 2ba:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <alarm_minutes>
 2be:	08 95       	ret
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret

000002c4 <Display_Current_Setting>:
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	00 d0       	rcall	.+0      	; 0x2ce <Display_Current_Setting+0xa>
 2ce:	1f 92       	push	r1
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	88 23       	and	r24, r24
 2d6:	21 f0       	breq	.+8      	; 0x2e0 <Display_Current_Setting+0x1c>
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	09 f4       	brne	.+2      	; 0x2de <Display_Current_Setting+0x1a>
 2dc:	41 c0       	rjmp	.+130    	; 0x360 <Display_Current_Setting+0x9c>
 2de:	7e c0       	rjmp	.+252    	; 0x3dc <Display_Current_Setting+0x118>
 2e0:	0e 94 44 01 	call	0x288	; 0x288 <Get_Current_Value>
 2e4:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 2e8:	89 17       	cp	r24, r25
 2ea:	09 f4       	brne	.+2      	; 0x2ee <Display_Current_Setting+0x2a>
 2ec:	77 c0       	rjmp	.+238    	; 0x3dc <Display_Current_Setting+0x118>
 2ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 2f2:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
 2fe:	83 e6       	ldi	r24, 0x63	; 99
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 306:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <selected_parameter>
 30a:	88 23       	and	r24, r24
 30c:	19 f0       	breq	.+6      	; 0x314 <Display_Current_Setting+0x50>
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	31 f0       	breq	.+12     	; 0x31e <Display_Current_Setting+0x5a>
 312:	09 c0       	rjmp	.+18     	; 0x326 <Display_Current_Setting+0x62>
 314:	88 e6       	ldi	r24, 0x68	; 104
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 31c:	04 c0       	rjmp	.+8      	; 0x326 <Display_Current_Setting+0x62>
 31e:	80 e7       	ldi	r24, 0x70	; 112
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 326:	0e 94 44 01 	call	0x288	; 0x288 <Get_Current_Value>
 32a:	1f 92       	push	r1
 32c:	8f 93       	push	r24
 32e:	8a e7       	ldi	r24, 0x7A	; 122
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	9f 93       	push	r25
 334:	8f 93       	push	r24
 336:	8e 01       	movw	r16, r28
 338:	0f 5f       	subi	r16, 0xFF	; 255
 33a:	1f 4f       	sbci	r17, 0xFF	; 255
 33c:	1f 93       	push	r17
 33e:	0f 93       	push	r16
 340:	0e 94 07 03 	call	0x60e	; 0x60e <sprintf>
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
 34c:	c8 01       	movw	r24, r16
 34e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	3e c0       	rjmp	.+124    	; 0x3dc <Display_Current_Setting+0x118>
 360:	0e 94 53 01 	call	0x2a6	; 0x2a6 <Alarm_Get_Current_Value>
 364:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 368:	89 17       	cp	r24, r25
 36a:	c1 f1       	breq	.+112    	; 0x3dc <Display_Current_Setting+0x118>
 36c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 370:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
 37c:	83 e6       	ldi	r24, 0x63	; 99
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 384:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <selected_parameter>
 388:	88 23       	and	r24, r24
 38a:	19 f0       	breq	.+6      	; 0x392 <Display_Current_Setting+0xce>
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	31 f0       	breq	.+12     	; 0x39c <Display_Current_Setting+0xd8>
 390:	09 c0       	rjmp	.+18     	; 0x3a4 <Display_Current_Setting+0xe0>
 392:	88 e6       	ldi	r24, 0x68	; 104
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 39a:	04 c0       	rjmp	.+8      	; 0x3a4 <Display_Current_Setting+0xe0>
 39c:	80 e7       	ldi	r24, 0x70	; 112
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 3a4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <Alarm_Get_Current_Value>
 3a8:	1f 92       	push	r1
 3aa:	8f 93       	push	r24
 3ac:	8a e7       	ldi	r24, 0x7A	; 122
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	9f 93       	push	r25
 3b2:	8f 93       	push	r24
 3b4:	8e 01       	movw	r16, r28
 3b6:	0f 5f       	subi	r16, 0xFF	; 255
 3b8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ba:	1f 93       	push	r17
 3bc:	0f 93       	push	r16
 3be:	0e 94 07 03 	call	0x60e	; 0x60e <sprintf>
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
 3ca:	c8 01       	movw	r24, r16
 3cc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	0f 91       	pop	r16
 3ea:	08 95       	ret

000003ec <Display_Time>:
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
 3f4:	8f e7       	ldi	r24, 0x7F	; 127
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 3fc:	08 95       	ret

000003fe <Increase_Value>:
 3fe:	0e 94 3a 01 	call	0x274	; 0x274 <Get_Current_Value_Ptr>
 402:	dc 01       	movw	r26, r24
 404:	9c 91       	ld	r25, X
 406:	9f 5f       	subi	r25, 0xFF	; 255
 408:	9c 93       	st	X, r25
 40a:	e0 91 d9 00 	lds	r30, 0x00D9	; 0x8000d9 <selected_parameter>
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	e1 53       	subi	r30, 0x31	; 49
 412:	ff 4f       	sbci	r31, 0xFF	; 255
 414:	80 81       	ld	r24, Z
 416:	89 17       	cp	r24, r25
 418:	08 f4       	brcc	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	1c 92       	st	X, r1
 41c:	08 95       	ret

0000041e <Alarm_Increase_Value>:
 41e:	0e 94 30 01 	call	0x260	; 0x260 <Alarm_Get_Current_Value_Ptr>
 422:	dc 01       	movw	r26, r24
 424:	9c 91       	ld	r25, X
 426:	9f 5f       	subi	r25, 0xFF	; 255
 428:	9c 93       	st	X, r25
 42a:	e0 91 d9 00 	lds	r30, 0x00D9	; 0x8000d9 <selected_parameter>
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	e1 53       	subi	r30, 0x31	; 49
 432:	ff 4f       	sbci	r31, 0xFF	; 255
 434:	80 81       	ld	r24, Z
 436:	89 17       	cp	r24, r25
 438:	08 f4       	brcc	.+2      	; 0x43c <Alarm_Increase_Value+0x1e>
 43a:	1c 92       	st	X, r1
 43c:	08 95       	ret

0000043e <Enter_Set_Time_Mode>:
	
}
void Enter_Set_Time_Mode(){
	LCD_Clear();
 43e:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
	LCD_Set_Cursor(0, 0);
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
	LCD_String("Set time");
 44a:	84 eb       	ldi	r24, 0xB4	; 180
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
	
	while(1){
		Display_Current_Setting(0);
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Display_Current_Setting>
		if(!(PINB & (1 << Button_Ok))){
 458:	b0 99       	sbic	0x16, 0	; 22
 45a:	08 c0       	rjmp	.+16     	; 0x46c <__stack+0xd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 45c:	83 e2       	ldi	r24, 0x23	; 35
 45e:	94 ef       	ldi	r25, 0xF4	; 244
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <__stack+0x1>
 464:	00 c0       	rjmp	.+0      	; 0x466 <__stack+0x7>
 466:	00 00       	nop
			_delay_ms(250);
			Increase_Value();
 468:	0e 94 ff 01 	call	0x3fe	; 0x3fe <Increase_Value>
		}
		if(!(PINB & (1 << Button_Set))){
 46c:	b1 99       	sbic	0x16, 1	; 22
 46e:	f1 cf       	rjmp	.-30     	; 0x452 <Enter_Set_Time_Mode+0x14>
 470:	83 e2       	ldi	r24, 0x23	; 35
 472:	94 ef       	ldi	r25, 0xF4	; 244
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <__stack+0x15>
 478:	00 c0       	rjmp	.+0      	; 0x47a <__stack+0x1b>
 47a:	00 00       	nop
			_delay_ms(250);
			selected_parameter++;
 47c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <selected_parameter>
 480:	8f 5f       	subi	r24, 0xFF	; 255
 482:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <selected_parameter>
			if(selected_parameter > 1){
 486:	82 30       	cpi	r24, 0x02	; 2
 488:	20 f3       	brcs	.-56     	; 0x452 <Enter_Set_Time_Mode+0x14>
				selected_parameter = 0;
 48a:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <selected_parameter>
 48e:	08 95       	ret

00000490 <Enter_Set_Alarm_Mode>:
		
	}
}

void Enter_Set_Alarm_Mode(){
	LCD_Clear();
 490:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
	LCD_Set_Cursor(0, 0);
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
	LCD_String("Set alarm:");
 49c:	80 e9       	ldi	r24, 0x90	; 144
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
	
	while(1){
		Display_Current_Setting(1);
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Display_Current_Setting>
		if(!(PINB & (1 << Button_Ok))){
 4aa:	b0 99       	sbic	0x16, 0	; 22
 4ac:	08 c0       	rjmp	.+16     	; 0x4be <Enter_Set_Alarm_Mode+0x2e>
 4ae:	83 e2       	ldi	r24, 0x23	; 35
 4b0:	94 ef       	ldi	r25, 0xF4	; 244
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <Enter_Set_Alarm_Mode+0x22>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <Enter_Set_Alarm_Mode+0x28>
 4b8:	00 00       	nop
			_delay_ms(250);
			Alarm_Increase_Value();
 4ba:	0e 94 0f 02 	call	0x41e	; 0x41e <Alarm_Increase_Value>
		}
		if(!(PINB & (1 << Button_Set))){
 4be:	b1 99       	sbic	0x16, 1	; 22
 4c0:	f1 cf       	rjmp	.-30     	; 0x4a4 <Enter_Set_Alarm_Mode+0x14>
 4c2:	83 e2       	ldi	r24, 0x23	; 35
 4c4:	94 ef       	ldi	r25, 0xF4	; 244
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <Enter_Set_Alarm_Mode+0x36>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <Enter_Set_Alarm_Mode+0x3c>
 4cc:	00 00       	nop
			_delay_ms(250);
			selected_parameter++;
 4ce:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <selected_parameter>
 4d2:	8f 5f       	subi	r24, 0xFF	; 255
 4d4:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <selected_parameter>
			if(selected_parameter > 1){
 4d8:	82 30       	cpi	r24, 0x02	; 2
 4da:	20 f3       	brcs	.-56     	; 0x4a4 <Enter_Set_Alarm_Mode+0x14>
				selected_parameter = 0;
 4dc:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <selected_parameter>
 4e0:	08 95       	ret

000004e2 <Clock_Alarm>:
	}
}

void Clock_Alarm(){
	
	if (Current_Mode == MODE_NORMAL) {
 4e2:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <Current_Mode>
 4e6:	81 11       	cpse	r24, r1
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <Clock_Alarm+0xc>
		
		Display_Time();
 4ea:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Display_Time>
	}
	if(!(PINB & (1 << Button_Ok))){
 4ee:	b0 99       	sbic	0x16, 0	; 22
 4f0:	63 c0       	rjmp	.+198    	; 0x5b8 <Clock_Alarm+0xd6>
 4f2:	83 e2       	ldi	r24, 0x23	; 35
 4f4:	94 ef       	ldi	r25, 0xF4	; 244
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <Clock_Alarm+0x14>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <Clock_Alarm+0x1a>
 4fc:	00 00       	nop
		_delay_ms(250);
		switch(Current_Mode){
 4fe:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <Current_Mode>
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	01 f1       	breq	.+64     	; 0x546 <Clock_Alarm+0x64>
 506:	38 f0       	brcs	.+14     	; 0x516 <Clock_Alarm+0x34>
 508:	82 30       	cpi	r24, 0x02	; 2
 50a:	09 f4       	brne	.+2      	; 0x50e <Clock_Alarm+0x2c>
 50c:	4b c0       	rjmp	.+150    	; 0x5a4 <Clock_Alarm+0xc2>
 50e:	83 30       	cpi	r24, 0x03	; 3
 510:	09 f4       	brne	.+2      	; 0x514 <Clock_Alarm+0x32>
 512:	4d c0       	rjmp	.+154    	; 0x5ae <Clock_Alarm+0xcc>
 514:	51 c0       	rjmp	.+162    	; 0x5b8 <Clock_Alarm+0xd6>
			case MODE_NORMAL:
				Current_Mode = MODE_MENU;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <Current_Mode>
				flag_set = 0;
 51c:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <flag_set>
				LCD_Clear();
 520:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
				LCD_Set_Cursor(0, 0);
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
				LCD_String("* Set time");
 52c:	8b e9       	ldi	r24, 0x9B	; 155
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
				LCD_Set_Cursor(0, 1);
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
				LCD_String("  Set alarm");
 53c:	86 ea       	ldi	r24, 0xA6	; 166
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
			break;
 544:	39 c0       	rjmp	.+114    	; 0x5b8 <Clock_Alarm+0xd6>
			
			case MODE_MENU:
				if (flag_set == 0) {
 546:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <flag_set>
 54a:	81 11       	cpse	r24, r1
 54c:	16 c0       	rjmp	.+44     	; 0x57a <Clock_Alarm+0x98>
					LCD_Clear();
 54e:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
					LCD_Set_Cursor(0, 0);
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
					LCD_String("  Set time");
 55a:	82 eb       	ldi	r24, 0xB2	; 178
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
					LCD_Set_Cursor(0, 1);
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
					LCD_String("* Set alarm");
 56a:	8d eb       	ldi	r24, 0xBD	; 189
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
					flag_set = 1;
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <flag_set>
 578:	1f c0       	rjmp	.+62     	; 0x5b8 <Clock_Alarm+0xd6>
					} else {
					LCD_Clear();
 57a:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
					LCD_Set_Cursor(0, 0);
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
					LCD_String("* Set time");
 586:	8b e9       	ldi	r24, 0x9B	; 155
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
					LCD_Set_Cursor(0, 1);
 58e:	61 e0       	ldi	r22, 0x01	; 1
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
					LCD_String("  Set alarm");
 596:	86 ea       	ldi	r24, 0xA6	; 166
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
					flag_set = 0;
 59e:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <flag_set>
 5a2:	0a c0       	rjmp	.+20     	; 0x5b8 <Clock_Alarm+0xd6>
				}
			break;
			case MODE_SET_TIME:
				Enter_Set_Time_Mode();
 5a4:	0e 94 1f 02 	call	0x43e	; 0x43e <Enter_Set_Time_Mode>
				Current_Mode = MODE_NORMAL; 
 5a8:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <Current_Mode>
			break;
 5ac:	23 c0       	rjmp	.+70     	; 0x5f4 <Clock_Alarm+0x112>

			case MODE_SET_ALARM:
				Enter_Set_Alarm_Mode();
 5ae:	0e 94 48 02 	call	0x490	; 0x490 <Enter_Set_Alarm_Mode>
				Current_Mode = MODE_NORMAL; 
 5b2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <Current_Mode>
			break;
 5b6:	1e c0       	rjmp	.+60     	; 0x5f4 <Clock_Alarm+0x112>
		}
	}
	if(!(PINB & (1 << Button_Set)) && Current_Mode == MODE_MENU){
 5b8:	b1 99       	sbic	0x16, 1	; 22
 5ba:	1d c0       	rjmp	.+58     	; 0x5f6 <Clock_Alarm+0x114>
 5bc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <Current_Mode>
 5c0:	81 30       	cpi	r24, 0x01	; 1
 5c2:	c9 f4       	brne	.+50     	; 0x5f6 <Clock_Alarm+0x114>
 5c4:	83 e2       	ldi	r24, 0x23	; 35
 5c6:	94 ef       	ldi	r25, 0xF4	; 244
 5c8:	01 97       	sbiw	r24, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <Clock_Alarm+0xe6>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <Clock_Alarm+0xec>
 5ce:	00 00       	nop
		_delay_ms(250);
		if (flag_set == 0) {
 5d0:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <flag_set>
 5d4:	81 11       	cpse	r24, r1
 5d6:	07 c0       	rjmp	.+14     	; 0x5e6 <Clock_Alarm+0x104>
			Enter_Set_Time_Mode();
 5d8:	0e 94 1f 02 	call	0x43e	; 0x43e <Enter_Set_Time_Mode>
			LCD_Clear();
 5dc:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
			Current_Mode = MODE_NORMAL;
 5e0:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <Current_Mode>
 5e4:	08 95       	ret
			} else {
			Enter_Set_Alarm_Mode();
 5e6:	0e 94 48 02 	call	0x490	; 0x490 <Enter_Set_Alarm_Mode>
			LCD_Clear();
 5ea:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
			Current_Mode = MODE_NORMAL;
 5ee:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <Current_Mode>
		}
	}
}
 5f2:	08 95       	ret
				Enter_Set_Alarm_Mode();
				Current_Mode = MODE_NORMAL; 
			break;
		}
	}
	if(!(PINB & (1 << Button_Set)) && Current_Mode == MODE_MENU){
 5f4:	86 b3       	in	r24, 0x16	; 22
 5f6:	08 95       	ret

000005f8 <main>:
	}
}

int main(void){
	
	MCU_Init();
 5f8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCU_Init>
	//sei();
	LCD_Clear();
 5fc:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
	LCD_String("Alarm");
 600:	89 ec       	ldi	r24, 0xC9	; 201
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
	while (1){
		Clock_Alarm();
 608:	0e 94 71 02 	call	0x4e2	; 0x4e2 <Clock_Alarm>
 60c:	fd cf       	rjmp	.-6      	; 0x608 <main+0x10>

0000060e <sprintf>:
 60e:	ae e0       	ldi	r26, 0x0E	; 14
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	ed e0       	ldi	r30, 0x0D	; 13
 614:	f3 e0       	ldi	r31, 0x03	; 3
 616:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__prologue_saves__+0x1c>
 61a:	0d 89       	ldd	r16, Y+21	; 0x15
 61c:	1e 89       	ldd	r17, Y+22	; 0x16
 61e:	86 e0       	ldi	r24, 0x06	; 6
 620:	8c 83       	std	Y+4, r24	; 0x04
 622:	1a 83       	std	Y+2, r17	; 0x02
 624:	09 83       	std	Y+1, r16	; 0x01
 626:	8f ef       	ldi	r24, 0xFF	; 255
 628:	9f e7       	ldi	r25, 0x7F	; 127
 62a:	9e 83       	std	Y+6, r25	; 0x06
 62c:	8d 83       	std	Y+5, r24	; 0x05
 62e:	ae 01       	movw	r20, r28
 630:	47 5e       	subi	r20, 0xE7	; 231
 632:	5f 4f       	sbci	r21, 0xFF	; 255
 634:	6f 89       	ldd	r22, Y+23	; 0x17
 636:	78 8d       	ldd	r23, Y+24	; 0x18
 638:	ce 01       	movw	r24, r28
 63a:	01 96       	adiw	r24, 0x01	; 1
 63c:	0e 94 29 03 	call	0x652	; 0x652 <vfprintf>
 640:	ef 81       	ldd	r30, Y+7	; 0x07
 642:	f8 85       	ldd	r31, Y+8	; 0x08
 644:	e0 0f       	add	r30, r16
 646:	f1 1f       	adc	r31, r17
 648:	10 82       	st	Z, r1
 64a:	2e 96       	adiw	r28, 0x0e	; 14
 64c:	e4 e0       	ldi	r30, 0x04	; 4
 64e:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__epilogue_restores__+0x1c>

00000652 <vfprintf>:
 652:	ab e0       	ldi	r26, 0x0B	; 11
 654:	b0 e0       	ldi	r27, 0x00	; 0
 656:	ef e2       	ldi	r30, 0x2F	; 47
 658:	f3 e0       	ldi	r31, 0x03	; 3
 65a:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__prologue_saves__>
 65e:	6c 01       	movw	r12, r24
 660:	7b 01       	movw	r14, r22
 662:	8a 01       	movw	r16, r20
 664:	fc 01       	movw	r30, r24
 666:	17 82       	std	Z+7, r1	; 0x07
 668:	16 82       	std	Z+6, r1	; 0x06
 66a:	83 81       	ldd	r24, Z+3	; 0x03
 66c:	81 ff       	sbrs	r24, 1
 66e:	cc c1       	rjmp	.+920    	; 0xa08 <vfprintf+0x3b6>
 670:	ce 01       	movw	r24, r28
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	3c 01       	movw	r6, r24
 676:	f6 01       	movw	r30, r12
 678:	93 81       	ldd	r25, Z+3	; 0x03
 67a:	f7 01       	movw	r30, r14
 67c:	93 fd       	sbrc	r25, 3
 67e:	85 91       	lpm	r24, Z+
 680:	93 ff       	sbrs	r25, 3
 682:	81 91       	ld	r24, Z+
 684:	7f 01       	movw	r14, r30
 686:	88 23       	and	r24, r24
 688:	09 f4       	brne	.+2      	; 0x68c <vfprintf+0x3a>
 68a:	ba c1       	rjmp	.+884    	; 0xa00 <vfprintf+0x3ae>
 68c:	85 32       	cpi	r24, 0x25	; 37
 68e:	39 f4       	brne	.+14     	; 0x69e <vfprintf+0x4c>
 690:	93 fd       	sbrc	r25, 3
 692:	85 91       	lpm	r24, Z+
 694:	93 ff       	sbrs	r25, 3
 696:	81 91       	ld	r24, Z+
 698:	7f 01       	movw	r14, r30
 69a:	85 32       	cpi	r24, 0x25	; 37
 69c:	29 f4       	brne	.+10     	; 0x6a8 <vfprintf+0x56>
 69e:	b6 01       	movw	r22, r12
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 6a6:	e7 cf       	rjmp	.-50     	; 0x676 <vfprintf+0x24>
 6a8:	91 2c       	mov	r9, r1
 6aa:	21 2c       	mov	r2, r1
 6ac:	31 2c       	mov	r3, r1
 6ae:	ff e1       	ldi	r31, 0x1F	; 31
 6b0:	f3 15       	cp	r31, r3
 6b2:	d8 f0       	brcs	.+54     	; 0x6ea <vfprintf+0x98>
 6b4:	8b 32       	cpi	r24, 0x2B	; 43
 6b6:	79 f0       	breq	.+30     	; 0x6d6 <vfprintf+0x84>
 6b8:	38 f4       	brcc	.+14     	; 0x6c8 <vfprintf+0x76>
 6ba:	80 32       	cpi	r24, 0x20	; 32
 6bc:	79 f0       	breq	.+30     	; 0x6dc <vfprintf+0x8a>
 6be:	83 32       	cpi	r24, 0x23	; 35
 6c0:	a1 f4       	brne	.+40     	; 0x6ea <vfprintf+0x98>
 6c2:	23 2d       	mov	r18, r3
 6c4:	20 61       	ori	r18, 0x10	; 16
 6c6:	1d c0       	rjmp	.+58     	; 0x702 <vfprintf+0xb0>
 6c8:	8d 32       	cpi	r24, 0x2D	; 45
 6ca:	61 f0       	breq	.+24     	; 0x6e4 <vfprintf+0x92>
 6cc:	80 33       	cpi	r24, 0x30	; 48
 6ce:	69 f4       	brne	.+26     	; 0x6ea <vfprintf+0x98>
 6d0:	23 2d       	mov	r18, r3
 6d2:	21 60       	ori	r18, 0x01	; 1
 6d4:	16 c0       	rjmp	.+44     	; 0x702 <vfprintf+0xb0>
 6d6:	83 2d       	mov	r24, r3
 6d8:	82 60       	ori	r24, 0x02	; 2
 6da:	38 2e       	mov	r3, r24
 6dc:	e3 2d       	mov	r30, r3
 6de:	e4 60       	ori	r30, 0x04	; 4
 6e0:	3e 2e       	mov	r3, r30
 6e2:	2a c0       	rjmp	.+84     	; 0x738 <vfprintf+0xe6>
 6e4:	f3 2d       	mov	r31, r3
 6e6:	f8 60       	ori	r31, 0x08	; 8
 6e8:	1d c0       	rjmp	.+58     	; 0x724 <vfprintf+0xd2>
 6ea:	37 fc       	sbrc	r3, 7
 6ec:	2d c0       	rjmp	.+90     	; 0x748 <vfprintf+0xf6>
 6ee:	20 ed       	ldi	r18, 0xD0	; 208
 6f0:	28 0f       	add	r18, r24
 6f2:	2a 30       	cpi	r18, 0x0A	; 10
 6f4:	40 f0       	brcs	.+16     	; 0x706 <vfprintf+0xb4>
 6f6:	8e 32       	cpi	r24, 0x2E	; 46
 6f8:	b9 f4       	brne	.+46     	; 0x728 <vfprintf+0xd6>
 6fa:	36 fc       	sbrc	r3, 6
 6fc:	81 c1       	rjmp	.+770    	; 0xa00 <vfprintf+0x3ae>
 6fe:	23 2d       	mov	r18, r3
 700:	20 64       	ori	r18, 0x40	; 64
 702:	32 2e       	mov	r3, r18
 704:	19 c0       	rjmp	.+50     	; 0x738 <vfprintf+0xe6>
 706:	36 fe       	sbrs	r3, 6
 708:	06 c0       	rjmp	.+12     	; 0x716 <vfprintf+0xc4>
 70a:	8a e0       	ldi	r24, 0x0A	; 10
 70c:	98 9e       	mul	r9, r24
 70e:	20 0d       	add	r18, r0
 710:	11 24       	eor	r1, r1
 712:	92 2e       	mov	r9, r18
 714:	11 c0       	rjmp	.+34     	; 0x738 <vfprintf+0xe6>
 716:	ea e0       	ldi	r30, 0x0A	; 10
 718:	2e 9e       	mul	r2, r30
 71a:	20 0d       	add	r18, r0
 71c:	11 24       	eor	r1, r1
 71e:	22 2e       	mov	r2, r18
 720:	f3 2d       	mov	r31, r3
 722:	f0 62       	ori	r31, 0x20	; 32
 724:	3f 2e       	mov	r3, r31
 726:	08 c0       	rjmp	.+16     	; 0x738 <vfprintf+0xe6>
 728:	8c 36       	cpi	r24, 0x6C	; 108
 72a:	21 f4       	brne	.+8      	; 0x734 <vfprintf+0xe2>
 72c:	83 2d       	mov	r24, r3
 72e:	80 68       	ori	r24, 0x80	; 128
 730:	38 2e       	mov	r3, r24
 732:	02 c0       	rjmp	.+4      	; 0x738 <vfprintf+0xe6>
 734:	88 36       	cpi	r24, 0x68	; 104
 736:	41 f4       	brne	.+16     	; 0x748 <vfprintf+0xf6>
 738:	f7 01       	movw	r30, r14
 73a:	93 fd       	sbrc	r25, 3
 73c:	85 91       	lpm	r24, Z+
 73e:	93 ff       	sbrs	r25, 3
 740:	81 91       	ld	r24, Z+
 742:	7f 01       	movw	r14, r30
 744:	81 11       	cpse	r24, r1
 746:	b3 cf       	rjmp	.-154    	; 0x6ae <vfprintf+0x5c>
 748:	98 2f       	mov	r25, r24
 74a:	9f 7d       	andi	r25, 0xDF	; 223
 74c:	95 54       	subi	r25, 0x45	; 69
 74e:	93 30       	cpi	r25, 0x03	; 3
 750:	28 f4       	brcc	.+10     	; 0x75c <vfprintf+0x10a>
 752:	0c 5f       	subi	r16, 0xFC	; 252
 754:	1f 4f       	sbci	r17, 0xFF	; 255
 756:	9f e3       	ldi	r25, 0x3F	; 63
 758:	99 83       	std	Y+1, r25	; 0x01
 75a:	0d c0       	rjmp	.+26     	; 0x776 <vfprintf+0x124>
 75c:	83 36       	cpi	r24, 0x63	; 99
 75e:	31 f0       	breq	.+12     	; 0x76c <vfprintf+0x11a>
 760:	83 37       	cpi	r24, 0x73	; 115
 762:	71 f0       	breq	.+28     	; 0x780 <vfprintf+0x12e>
 764:	83 35       	cpi	r24, 0x53	; 83
 766:	09 f0       	breq	.+2      	; 0x76a <vfprintf+0x118>
 768:	59 c0       	rjmp	.+178    	; 0x81c <vfprintf+0x1ca>
 76a:	21 c0       	rjmp	.+66     	; 0x7ae <vfprintf+0x15c>
 76c:	f8 01       	movw	r30, r16
 76e:	80 81       	ld	r24, Z
 770:	89 83       	std	Y+1, r24	; 0x01
 772:	0e 5f       	subi	r16, 0xFE	; 254
 774:	1f 4f       	sbci	r17, 0xFF	; 255
 776:	88 24       	eor	r8, r8
 778:	83 94       	inc	r8
 77a:	91 2c       	mov	r9, r1
 77c:	53 01       	movw	r10, r6
 77e:	13 c0       	rjmp	.+38     	; 0x7a6 <vfprintf+0x154>
 780:	28 01       	movw	r4, r16
 782:	f2 e0       	ldi	r31, 0x02	; 2
 784:	4f 0e       	add	r4, r31
 786:	51 1c       	adc	r5, r1
 788:	f8 01       	movw	r30, r16
 78a:	a0 80       	ld	r10, Z
 78c:	b1 80       	ldd	r11, Z+1	; 0x01
 78e:	36 fe       	sbrs	r3, 6
 790:	03 c0       	rjmp	.+6      	; 0x798 <vfprintf+0x146>
 792:	69 2d       	mov	r22, r9
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	02 c0       	rjmp	.+4      	; 0x79c <vfprintf+0x14a>
 798:	6f ef       	ldi	r22, 0xFF	; 255
 79a:	7f ef       	ldi	r23, 0xFF	; 255
 79c:	c5 01       	movw	r24, r10
 79e:	0e 94 15 05 	call	0xa2a	; 0xa2a <strnlen>
 7a2:	4c 01       	movw	r8, r24
 7a4:	82 01       	movw	r16, r4
 7a6:	f3 2d       	mov	r31, r3
 7a8:	ff 77       	andi	r31, 0x7F	; 127
 7aa:	3f 2e       	mov	r3, r31
 7ac:	16 c0       	rjmp	.+44     	; 0x7da <vfprintf+0x188>
 7ae:	28 01       	movw	r4, r16
 7b0:	22 e0       	ldi	r18, 0x02	; 2
 7b2:	42 0e       	add	r4, r18
 7b4:	51 1c       	adc	r5, r1
 7b6:	f8 01       	movw	r30, r16
 7b8:	a0 80       	ld	r10, Z
 7ba:	b1 80       	ldd	r11, Z+1	; 0x01
 7bc:	36 fe       	sbrs	r3, 6
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <vfprintf+0x174>
 7c0:	69 2d       	mov	r22, r9
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <vfprintf+0x178>
 7c6:	6f ef       	ldi	r22, 0xFF	; 255
 7c8:	7f ef       	ldi	r23, 0xFF	; 255
 7ca:	c5 01       	movw	r24, r10
 7cc:	0e 94 0a 05 	call	0xa14	; 0xa14 <strnlen_P>
 7d0:	4c 01       	movw	r8, r24
 7d2:	f3 2d       	mov	r31, r3
 7d4:	f0 68       	ori	r31, 0x80	; 128
 7d6:	3f 2e       	mov	r3, r31
 7d8:	82 01       	movw	r16, r4
 7da:	33 fc       	sbrc	r3, 3
 7dc:	1b c0       	rjmp	.+54     	; 0x814 <vfprintf+0x1c2>
 7de:	82 2d       	mov	r24, r2
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	88 16       	cp	r8, r24
 7e4:	99 06       	cpc	r9, r25
 7e6:	b0 f4       	brcc	.+44     	; 0x814 <vfprintf+0x1c2>
 7e8:	b6 01       	movw	r22, r12
 7ea:	80 e2       	ldi	r24, 0x20	; 32
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 7f2:	2a 94       	dec	r2
 7f4:	f4 cf       	rjmp	.-24     	; 0x7de <vfprintf+0x18c>
 7f6:	f5 01       	movw	r30, r10
 7f8:	37 fc       	sbrc	r3, 7
 7fa:	85 91       	lpm	r24, Z+
 7fc:	37 fe       	sbrs	r3, 7
 7fe:	81 91       	ld	r24, Z+
 800:	5f 01       	movw	r10, r30
 802:	b6 01       	movw	r22, r12
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 80a:	21 10       	cpse	r2, r1
 80c:	2a 94       	dec	r2
 80e:	21 e0       	ldi	r18, 0x01	; 1
 810:	82 1a       	sub	r8, r18
 812:	91 08       	sbc	r9, r1
 814:	81 14       	cp	r8, r1
 816:	91 04       	cpc	r9, r1
 818:	71 f7       	brne	.-36     	; 0x7f6 <vfprintf+0x1a4>
 81a:	e8 c0       	rjmp	.+464    	; 0x9ec <vfprintf+0x39a>
 81c:	84 36       	cpi	r24, 0x64	; 100
 81e:	11 f0       	breq	.+4      	; 0x824 <vfprintf+0x1d2>
 820:	89 36       	cpi	r24, 0x69	; 105
 822:	41 f5       	brne	.+80     	; 0x874 <vfprintf+0x222>
 824:	f8 01       	movw	r30, r16
 826:	37 fe       	sbrs	r3, 7
 828:	07 c0       	rjmp	.+14     	; 0x838 <vfprintf+0x1e6>
 82a:	60 81       	ld	r22, Z
 82c:	71 81       	ldd	r23, Z+1	; 0x01
 82e:	82 81       	ldd	r24, Z+2	; 0x02
 830:	93 81       	ldd	r25, Z+3	; 0x03
 832:	0c 5f       	subi	r16, 0xFC	; 252
 834:	1f 4f       	sbci	r17, 0xFF	; 255
 836:	08 c0       	rjmp	.+16     	; 0x848 <vfprintf+0x1f6>
 838:	60 81       	ld	r22, Z
 83a:	71 81       	ldd	r23, Z+1	; 0x01
 83c:	07 2e       	mov	r0, r23
 83e:	00 0c       	add	r0, r0
 840:	88 0b       	sbc	r24, r24
 842:	99 0b       	sbc	r25, r25
 844:	0e 5f       	subi	r16, 0xFE	; 254
 846:	1f 4f       	sbci	r17, 0xFF	; 255
 848:	f3 2d       	mov	r31, r3
 84a:	ff 76       	andi	r31, 0x6F	; 111
 84c:	3f 2e       	mov	r3, r31
 84e:	97 ff       	sbrs	r25, 7
 850:	09 c0       	rjmp	.+18     	; 0x864 <vfprintf+0x212>
 852:	90 95       	com	r25
 854:	80 95       	com	r24
 856:	70 95       	com	r23
 858:	61 95       	neg	r22
 85a:	7f 4f       	sbci	r23, 0xFF	; 255
 85c:	8f 4f       	sbci	r24, 0xFF	; 255
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	f0 68       	ori	r31, 0x80	; 128
 862:	3f 2e       	mov	r3, r31
 864:	2a e0       	ldi	r18, 0x0A	; 10
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	a3 01       	movw	r20, r6
 86a:	0e 94 5c 05 	call	0xab8	; 0xab8 <__ultoa_invert>
 86e:	88 2e       	mov	r8, r24
 870:	86 18       	sub	r8, r6
 872:	45 c0       	rjmp	.+138    	; 0x8fe <vfprintf+0x2ac>
 874:	85 37       	cpi	r24, 0x75	; 117
 876:	31 f4       	brne	.+12     	; 0x884 <vfprintf+0x232>
 878:	23 2d       	mov	r18, r3
 87a:	2f 7e       	andi	r18, 0xEF	; 239
 87c:	b2 2e       	mov	r11, r18
 87e:	2a e0       	ldi	r18, 0x0A	; 10
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	25 c0       	rjmp	.+74     	; 0x8ce <vfprintf+0x27c>
 884:	93 2d       	mov	r25, r3
 886:	99 7f       	andi	r25, 0xF9	; 249
 888:	b9 2e       	mov	r11, r25
 88a:	8f 36       	cpi	r24, 0x6F	; 111
 88c:	c1 f0       	breq	.+48     	; 0x8be <vfprintf+0x26c>
 88e:	18 f4       	brcc	.+6      	; 0x896 <vfprintf+0x244>
 890:	88 35       	cpi	r24, 0x58	; 88
 892:	79 f0       	breq	.+30     	; 0x8b2 <vfprintf+0x260>
 894:	b5 c0       	rjmp	.+362    	; 0xa00 <vfprintf+0x3ae>
 896:	80 37       	cpi	r24, 0x70	; 112
 898:	19 f0       	breq	.+6      	; 0x8a0 <vfprintf+0x24e>
 89a:	88 37       	cpi	r24, 0x78	; 120
 89c:	21 f0       	breq	.+8      	; 0x8a6 <vfprintf+0x254>
 89e:	b0 c0       	rjmp	.+352    	; 0xa00 <vfprintf+0x3ae>
 8a0:	e9 2f       	mov	r30, r25
 8a2:	e0 61       	ori	r30, 0x10	; 16
 8a4:	be 2e       	mov	r11, r30
 8a6:	b4 fe       	sbrs	r11, 4
 8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <vfprintf+0x272>
 8aa:	fb 2d       	mov	r31, r11
 8ac:	f4 60       	ori	r31, 0x04	; 4
 8ae:	bf 2e       	mov	r11, r31
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <vfprintf+0x272>
 8b2:	34 fe       	sbrs	r3, 4
 8b4:	0a c0       	rjmp	.+20     	; 0x8ca <vfprintf+0x278>
 8b6:	29 2f       	mov	r18, r25
 8b8:	26 60       	ori	r18, 0x06	; 6
 8ba:	b2 2e       	mov	r11, r18
 8bc:	06 c0       	rjmp	.+12     	; 0x8ca <vfprintf+0x278>
 8be:	28 e0       	ldi	r18, 0x08	; 8
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	05 c0       	rjmp	.+10     	; 0x8ce <vfprintf+0x27c>
 8c4:	20 e1       	ldi	r18, 0x10	; 16
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <vfprintf+0x27c>
 8ca:	20 e1       	ldi	r18, 0x10	; 16
 8cc:	32 e0       	ldi	r19, 0x02	; 2
 8ce:	f8 01       	movw	r30, r16
 8d0:	b7 fe       	sbrs	r11, 7
 8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <vfprintf+0x290>
 8d4:	60 81       	ld	r22, Z
 8d6:	71 81       	ldd	r23, Z+1	; 0x01
 8d8:	82 81       	ldd	r24, Z+2	; 0x02
 8da:	93 81       	ldd	r25, Z+3	; 0x03
 8dc:	0c 5f       	subi	r16, 0xFC	; 252
 8de:	1f 4f       	sbci	r17, 0xFF	; 255
 8e0:	06 c0       	rjmp	.+12     	; 0x8ee <vfprintf+0x29c>
 8e2:	60 81       	ld	r22, Z
 8e4:	71 81       	ldd	r23, Z+1	; 0x01
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 5f       	subi	r16, 0xFE	; 254
 8ec:	1f 4f       	sbci	r17, 0xFF	; 255
 8ee:	a3 01       	movw	r20, r6
 8f0:	0e 94 5c 05 	call	0xab8	; 0xab8 <__ultoa_invert>
 8f4:	88 2e       	mov	r8, r24
 8f6:	86 18       	sub	r8, r6
 8f8:	fb 2d       	mov	r31, r11
 8fa:	ff 77       	andi	r31, 0x7F	; 127
 8fc:	3f 2e       	mov	r3, r31
 8fe:	36 fe       	sbrs	r3, 6
 900:	0d c0       	rjmp	.+26     	; 0x91c <vfprintf+0x2ca>
 902:	23 2d       	mov	r18, r3
 904:	2e 7f       	andi	r18, 0xFE	; 254
 906:	a2 2e       	mov	r10, r18
 908:	89 14       	cp	r8, r9
 90a:	58 f4       	brcc	.+22     	; 0x922 <vfprintf+0x2d0>
 90c:	34 fe       	sbrs	r3, 4
 90e:	0b c0       	rjmp	.+22     	; 0x926 <vfprintf+0x2d4>
 910:	32 fc       	sbrc	r3, 2
 912:	09 c0       	rjmp	.+18     	; 0x926 <vfprintf+0x2d4>
 914:	83 2d       	mov	r24, r3
 916:	8e 7e       	andi	r24, 0xEE	; 238
 918:	a8 2e       	mov	r10, r24
 91a:	05 c0       	rjmp	.+10     	; 0x926 <vfprintf+0x2d4>
 91c:	b8 2c       	mov	r11, r8
 91e:	a3 2c       	mov	r10, r3
 920:	03 c0       	rjmp	.+6      	; 0x928 <vfprintf+0x2d6>
 922:	b8 2c       	mov	r11, r8
 924:	01 c0       	rjmp	.+2      	; 0x928 <vfprintf+0x2d6>
 926:	b9 2c       	mov	r11, r9
 928:	a4 fe       	sbrs	r10, 4
 92a:	0f c0       	rjmp	.+30     	; 0x94a <vfprintf+0x2f8>
 92c:	fe 01       	movw	r30, r28
 92e:	e8 0d       	add	r30, r8
 930:	f1 1d       	adc	r31, r1
 932:	80 81       	ld	r24, Z
 934:	80 33       	cpi	r24, 0x30	; 48
 936:	21 f4       	brne	.+8      	; 0x940 <vfprintf+0x2ee>
 938:	9a 2d       	mov	r25, r10
 93a:	99 7e       	andi	r25, 0xE9	; 233
 93c:	a9 2e       	mov	r10, r25
 93e:	09 c0       	rjmp	.+18     	; 0x952 <vfprintf+0x300>
 940:	a2 fe       	sbrs	r10, 2
 942:	06 c0       	rjmp	.+12     	; 0x950 <vfprintf+0x2fe>
 944:	b3 94       	inc	r11
 946:	b3 94       	inc	r11
 948:	04 c0       	rjmp	.+8      	; 0x952 <vfprintf+0x300>
 94a:	8a 2d       	mov	r24, r10
 94c:	86 78       	andi	r24, 0x86	; 134
 94e:	09 f0       	breq	.+2      	; 0x952 <vfprintf+0x300>
 950:	b3 94       	inc	r11
 952:	a3 fc       	sbrc	r10, 3
 954:	11 c0       	rjmp	.+34     	; 0x978 <vfprintf+0x326>
 956:	a0 fe       	sbrs	r10, 0
 958:	06 c0       	rjmp	.+12     	; 0x966 <vfprintf+0x314>
 95a:	b2 14       	cp	r11, r2
 95c:	88 f4       	brcc	.+34     	; 0x980 <vfprintf+0x32e>
 95e:	28 0c       	add	r2, r8
 960:	92 2c       	mov	r9, r2
 962:	9b 18       	sub	r9, r11
 964:	0e c0       	rjmp	.+28     	; 0x982 <vfprintf+0x330>
 966:	b2 14       	cp	r11, r2
 968:	60 f4       	brcc	.+24     	; 0x982 <vfprintf+0x330>
 96a:	b6 01       	movw	r22, r12
 96c:	80 e2       	ldi	r24, 0x20	; 32
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 974:	b3 94       	inc	r11
 976:	f7 cf       	rjmp	.-18     	; 0x966 <vfprintf+0x314>
 978:	b2 14       	cp	r11, r2
 97a:	18 f4       	brcc	.+6      	; 0x982 <vfprintf+0x330>
 97c:	2b 18       	sub	r2, r11
 97e:	02 c0       	rjmp	.+4      	; 0x984 <vfprintf+0x332>
 980:	98 2c       	mov	r9, r8
 982:	21 2c       	mov	r2, r1
 984:	a4 fe       	sbrs	r10, 4
 986:	10 c0       	rjmp	.+32     	; 0x9a8 <vfprintf+0x356>
 988:	b6 01       	movw	r22, r12
 98a:	80 e3       	ldi	r24, 0x30	; 48
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 992:	a2 fe       	sbrs	r10, 2
 994:	17 c0       	rjmp	.+46     	; 0x9c4 <vfprintf+0x372>
 996:	a1 fc       	sbrc	r10, 1
 998:	03 c0       	rjmp	.+6      	; 0x9a0 <vfprintf+0x34e>
 99a:	88 e7       	ldi	r24, 0x78	; 120
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <vfprintf+0x352>
 9a0:	88 e5       	ldi	r24, 0x58	; 88
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	b6 01       	movw	r22, r12
 9a6:	0c c0       	rjmp	.+24     	; 0x9c0 <vfprintf+0x36e>
 9a8:	8a 2d       	mov	r24, r10
 9aa:	86 78       	andi	r24, 0x86	; 134
 9ac:	59 f0       	breq	.+22     	; 0x9c4 <vfprintf+0x372>
 9ae:	a1 fe       	sbrs	r10, 1
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <vfprintf+0x364>
 9b2:	8b e2       	ldi	r24, 0x2B	; 43
 9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <vfprintf+0x366>
 9b6:	80 e2       	ldi	r24, 0x20	; 32
 9b8:	a7 fc       	sbrc	r10, 7
 9ba:	8d e2       	ldi	r24, 0x2D	; 45
 9bc:	b6 01       	movw	r22, r12
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 9c4:	89 14       	cp	r8, r9
 9c6:	38 f4       	brcc	.+14     	; 0x9d6 <vfprintf+0x384>
 9c8:	b6 01       	movw	r22, r12
 9ca:	80 e3       	ldi	r24, 0x30	; 48
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 9d2:	9a 94       	dec	r9
 9d4:	f7 cf       	rjmp	.-18     	; 0x9c4 <vfprintf+0x372>
 9d6:	8a 94       	dec	r8
 9d8:	f3 01       	movw	r30, r6
 9da:	e8 0d       	add	r30, r8
 9dc:	f1 1d       	adc	r31, r1
 9de:	80 81       	ld	r24, Z
 9e0:	b6 01       	movw	r22, r12
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 9e8:	81 10       	cpse	r8, r1
 9ea:	f5 cf       	rjmp	.-22     	; 0x9d6 <vfprintf+0x384>
 9ec:	22 20       	and	r2, r2
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <vfprintf+0x3a0>
 9f0:	42 ce       	rjmp	.-892    	; 0x676 <vfprintf+0x24>
 9f2:	b6 01       	movw	r22, r12
 9f4:	80 e2       	ldi	r24, 0x20	; 32
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 20 05 	call	0xa40	; 0xa40 <fputc>
 9fc:	2a 94       	dec	r2
 9fe:	f6 cf       	rjmp	.-20     	; 0x9ec <vfprintf+0x39a>
 a00:	f6 01       	movw	r30, r12
 a02:	86 81       	ldd	r24, Z+6	; 0x06
 a04:	97 81       	ldd	r25, Z+7	; 0x07
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <vfprintf+0x3ba>
 a08:	8f ef       	ldi	r24, 0xFF	; 255
 a0a:	9f ef       	ldi	r25, 0xFF	; 255
 a0c:	2b 96       	adiw	r28, 0x0b	; 11
 a0e:	e2 e1       	ldi	r30, 0x12	; 18
 a10:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__epilogue_restores__>

00000a14 <strnlen_P>:
 a14:	fc 01       	movw	r30, r24
 a16:	05 90       	lpm	r0, Z+
 a18:	61 50       	subi	r22, 0x01	; 1
 a1a:	70 40       	sbci	r23, 0x00	; 0
 a1c:	01 10       	cpse	r0, r1
 a1e:	d8 f7       	brcc	.-10     	; 0xa16 <strnlen_P+0x2>
 a20:	80 95       	com	r24
 a22:	90 95       	com	r25
 a24:	8e 0f       	add	r24, r30
 a26:	9f 1f       	adc	r25, r31
 a28:	08 95       	ret

00000a2a <strnlen>:
 a2a:	fc 01       	movw	r30, r24
 a2c:	61 50       	subi	r22, 0x01	; 1
 a2e:	70 40       	sbci	r23, 0x00	; 0
 a30:	01 90       	ld	r0, Z+
 a32:	01 10       	cpse	r0, r1
 a34:	d8 f7       	brcc	.-10     	; 0xa2c <strnlen+0x2>
 a36:	80 95       	com	r24
 a38:	90 95       	com	r25
 a3a:	8e 0f       	add	r24, r30
 a3c:	9f 1f       	adc	r25, r31
 a3e:	08 95       	ret

00000a40 <fputc>:
 a40:	0f 93       	push	r16
 a42:	1f 93       	push	r17
 a44:	cf 93       	push	r28
 a46:	df 93       	push	r29
 a48:	fb 01       	movw	r30, r22
 a4a:	23 81       	ldd	r18, Z+3	; 0x03
 a4c:	21 fd       	sbrc	r18, 1
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <fputc+0x16>
 a50:	8f ef       	ldi	r24, 0xFF	; 255
 a52:	9f ef       	ldi	r25, 0xFF	; 255
 a54:	2c c0       	rjmp	.+88     	; 0xaae <fputc+0x6e>
 a56:	22 ff       	sbrs	r18, 2
 a58:	16 c0       	rjmp	.+44     	; 0xa86 <fputc+0x46>
 a5a:	46 81       	ldd	r20, Z+6	; 0x06
 a5c:	57 81       	ldd	r21, Z+7	; 0x07
 a5e:	24 81       	ldd	r18, Z+4	; 0x04
 a60:	35 81       	ldd	r19, Z+5	; 0x05
 a62:	42 17       	cp	r20, r18
 a64:	53 07       	cpc	r21, r19
 a66:	44 f4       	brge	.+16     	; 0xa78 <fputc+0x38>
 a68:	a0 81       	ld	r26, Z
 a6a:	b1 81       	ldd	r27, Z+1	; 0x01
 a6c:	9d 01       	movw	r18, r26
 a6e:	2f 5f       	subi	r18, 0xFF	; 255
 a70:	3f 4f       	sbci	r19, 0xFF	; 255
 a72:	31 83       	std	Z+1, r19	; 0x01
 a74:	20 83       	st	Z, r18
 a76:	8c 93       	st	X, r24
 a78:	26 81       	ldd	r18, Z+6	; 0x06
 a7a:	37 81       	ldd	r19, Z+7	; 0x07
 a7c:	2f 5f       	subi	r18, 0xFF	; 255
 a7e:	3f 4f       	sbci	r19, 0xFF	; 255
 a80:	37 83       	std	Z+7, r19	; 0x07
 a82:	26 83       	std	Z+6, r18	; 0x06
 a84:	14 c0       	rjmp	.+40     	; 0xaae <fputc+0x6e>
 a86:	8b 01       	movw	r16, r22
 a88:	ec 01       	movw	r28, r24
 a8a:	fb 01       	movw	r30, r22
 a8c:	00 84       	ldd	r0, Z+8	; 0x08
 a8e:	f1 85       	ldd	r31, Z+9	; 0x09
 a90:	e0 2d       	mov	r30, r0
 a92:	09 95       	icall
 a94:	89 2b       	or	r24, r25
 a96:	e1 f6       	brne	.-72     	; 0xa50 <fputc+0x10>
 a98:	d8 01       	movw	r26, r16
 a9a:	16 96       	adiw	r26, 0x06	; 6
 a9c:	8d 91       	ld	r24, X+
 a9e:	9c 91       	ld	r25, X
 aa0:	17 97       	sbiw	r26, 0x07	; 7
 aa2:	01 96       	adiw	r24, 0x01	; 1
 aa4:	17 96       	adiw	r26, 0x07	; 7
 aa6:	9c 93       	st	X, r25
 aa8:	8e 93       	st	-X, r24
 aaa:	16 97       	sbiw	r26, 0x06	; 6
 aac:	ce 01       	movw	r24, r28
 aae:	df 91       	pop	r29
 ab0:	cf 91       	pop	r28
 ab2:	1f 91       	pop	r17
 ab4:	0f 91       	pop	r16
 ab6:	08 95       	ret

00000ab8 <__ultoa_invert>:
 ab8:	fa 01       	movw	r30, r20
 aba:	aa 27       	eor	r26, r26
 abc:	28 30       	cpi	r18, 0x08	; 8
 abe:	51 f1       	breq	.+84     	; 0xb14 <__ultoa_invert+0x5c>
 ac0:	20 31       	cpi	r18, 0x10	; 16
 ac2:	81 f1       	breq	.+96     	; 0xb24 <__ultoa_invert+0x6c>
 ac4:	e8 94       	clt
 ac6:	6f 93       	push	r22
 ac8:	6e 7f       	andi	r22, 0xFE	; 254
 aca:	6e 5f       	subi	r22, 0xFE	; 254
 acc:	7f 4f       	sbci	r23, 0xFF	; 255
 ace:	8f 4f       	sbci	r24, 0xFF	; 255
 ad0:	9f 4f       	sbci	r25, 0xFF	; 255
 ad2:	af 4f       	sbci	r26, 0xFF	; 255
 ad4:	b1 e0       	ldi	r27, 0x01	; 1
 ad6:	3e d0       	rcall	.+124    	; 0xb54 <__ultoa_invert+0x9c>
 ad8:	b4 e0       	ldi	r27, 0x04	; 4
 ada:	3c d0       	rcall	.+120    	; 0xb54 <__ultoa_invert+0x9c>
 adc:	67 0f       	add	r22, r23
 ade:	78 1f       	adc	r23, r24
 ae0:	89 1f       	adc	r24, r25
 ae2:	9a 1f       	adc	r25, r26
 ae4:	a1 1d       	adc	r26, r1
 ae6:	68 0f       	add	r22, r24
 ae8:	79 1f       	adc	r23, r25
 aea:	8a 1f       	adc	r24, r26
 aec:	91 1d       	adc	r25, r1
 aee:	a1 1d       	adc	r26, r1
 af0:	6a 0f       	add	r22, r26
 af2:	71 1d       	adc	r23, r1
 af4:	81 1d       	adc	r24, r1
 af6:	91 1d       	adc	r25, r1
 af8:	a1 1d       	adc	r26, r1
 afa:	20 d0       	rcall	.+64     	; 0xb3c <__ultoa_invert+0x84>
 afc:	09 f4       	brne	.+2      	; 0xb00 <__ultoa_invert+0x48>
 afe:	68 94       	set
 b00:	3f 91       	pop	r19
 b02:	2a e0       	ldi	r18, 0x0A	; 10
 b04:	26 9f       	mul	r18, r22
 b06:	11 24       	eor	r1, r1
 b08:	30 19       	sub	r19, r0
 b0a:	30 5d       	subi	r19, 0xD0	; 208
 b0c:	31 93       	st	Z+, r19
 b0e:	de f6       	brtc	.-74     	; 0xac6 <__ultoa_invert+0xe>
 b10:	cf 01       	movw	r24, r30
 b12:	08 95       	ret
 b14:	46 2f       	mov	r20, r22
 b16:	47 70       	andi	r20, 0x07	; 7
 b18:	40 5d       	subi	r20, 0xD0	; 208
 b1a:	41 93       	st	Z+, r20
 b1c:	b3 e0       	ldi	r27, 0x03	; 3
 b1e:	0f d0       	rcall	.+30     	; 0xb3e <__ultoa_invert+0x86>
 b20:	c9 f7       	brne	.-14     	; 0xb14 <__ultoa_invert+0x5c>
 b22:	f6 cf       	rjmp	.-20     	; 0xb10 <__ultoa_invert+0x58>
 b24:	46 2f       	mov	r20, r22
 b26:	4f 70       	andi	r20, 0x0F	; 15
 b28:	40 5d       	subi	r20, 0xD0	; 208
 b2a:	4a 33       	cpi	r20, 0x3A	; 58
 b2c:	18 f0       	brcs	.+6      	; 0xb34 <__ultoa_invert+0x7c>
 b2e:	49 5d       	subi	r20, 0xD9	; 217
 b30:	31 fd       	sbrc	r19, 1
 b32:	40 52       	subi	r20, 0x20	; 32
 b34:	41 93       	st	Z+, r20
 b36:	02 d0       	rcall	.+4      	; 0xb3c <__ultoa_invert+0x84>
 b38:	a9 f7       	brne	.-22     	; 0xb24 <__ultoa_invert+0x6c>
 b3a:	ea cf       	rjmp	.-44     	; 0xb10 <__ultoa_invert+0x58>
 b3c:	b4 e0       	ldi	r27, 0x04	; 4
 b3e:	a6 95       	lsr	r26
 b40:	97 95       	ror	r25
 b42:	87 95       	ror	r24
 b44:	77 95       	ror	r23
 b46:	67 95       	ror	r22
 b48:	ba 95       	dec	r27
 b4a:	c9 f7       	brne	.-14     	; 0xb3e <__ultoa_invert+0x86>
 b4c:	00 97       	sbiw	r24, 0x00	; 0
 b4e:	61 05       	cpc	r22, r1
 b50:	71 05       	cpc	r23, r1
 b52:	08 95       	ret
 b54:	9b 01       	movw	r18, r22
 b56:	ac 01       	movw	r20, r24
 b58:	0a 2e       	mov	r0, r26
 b5a:	06 94       	lsr	r0
 b5c:	57 95       	ror	r21
 b5e:	47 95       	ror	r20
 b60:	37 95       	ror	r19
 b62:	27 95       	ror	r18
 b64:	ba 95       	dec	r27
 b66:	c9 f7       	brne	.-14     	; 0xb5a <__ultoa_invert+0xa2>
 b68:	62 0f       	add	r22, r18
 b6a:	73 1f       	adc	r23, r19
 b6c:	84 1f       	adc	r24, r20
 b6e:	95 1f       	adc	r25, r21
 b70:	a0 1d       	adc	r26, r0
 b72:	08 95       	ret

00000b74 <__prologue_saves__>:
 b74:	2f 92       	push	r2
 b76:	3f 92       	push	r3
 b78:	4f 92       	push	r4
 b7a:	5f 92       	push	r5
 b7c:	6f 92       	push	r6
 b7e:	7f 92       	push	r7
 b80:	8f 92       	push	r8
 b82:	9f 92       	push	r9
 b84:	af 92       	push	r10
 b86:	bf 92       	push	r11
 b88:	cf 92       	push	r12
 b8a:	df 92       	push	r13
 b8c:	ef 92       	push	r14
 b8e:	ff 92       	push	r15
 b90:	0f 93       	push	r16
 b92:	1f 93       	push	r17
 b94:	cf 93       	push	r28
 b96:	df 93       	push	r29
 b98:	cd b7       	in	r28, 0x3d	; 61
 b9a:	de b7       	in	r29, 0x3e	; 62
 b9c:	ca 1b       	sub	r28, r26
 b9e:	db 0b       	sbc	r29, r27
 ba0:	0f b6       	in	r0, 0x3f	; 63
 ba2:	f8 94       	cli
 ba4:	de bf       	out	0x3e, r29	; 62
 ba6:	0f be       	out	0x3f, r0	; 63
 ba8:	cd bf       	out	0x3d, r28	; 61
 baa:	09 94       	ijmp

00000bac <__epilogue_restores__>:
 bac:	2a 88       	ldd	r2, Y+18	; 0x12
 bae:	39 88       	ldd	r3, Y+17	; 0x11
 bb0:	48 88       	ldd	r4, Y+16	; 0x10
 bb2:	5f 84       	ldd	r5, Y+15	; 0x0f
 bb4:	6e 84       	ldd	r6, Y+14	; 0x0e
 bb6:	7d 84       	ldd	r7, Y+13	; 0x0d
 bb8:	8c 84       	ldd	r8, Y+12	; 0x0c
 bba:	9b 84       	ldd	r9, Y+11	; 0x0b
 bbc:	aa 84       	ldd	r10, Y+10	; 0x0a
 bbe:	b9 84       	ldd	r11, Y+9	; 0x09
 bc0:	c8 84       	ldd	r12, Y+8	; 0x08
 bc2:	df 80       	ldd	r13, Y+7	; 0x07
 bc4:	ee 80       	ldd	r14, Y+6	; 0x06
 bc6:	fd 80       	ldd	r15, Y+5	; 0x05
 bc8:	0c 81       	ldd	r16, Y+4	; 0x04
 bca:	1b 81       	ldd	r17, Y+3	; 0x03
 bcc:	aa 81       	ldd	r26, Y+2	; 0x02
 bce:	b9 81       	ldd	r27, Y+1	; 0x01
 bd0:	ce 0f       	add	r28, r30
 bd2:	d1 1d       	adc	r29, r1
 bd4:	0f b6       	in	r0, 0x3f	; 63
 bd6:	f8 94       	cli
 bd8:	de bf       	out	0x3e, r29	; 62
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	cd bf       	out	0x3d, r28	; 61
 bde:	ed 01       	movw	r28, r26
 be0:	08 95       	ret

00000be2 <_exit>:
 be2:	f8 94       	cli

00000be4 <__stop_program>:
 be4:	ff cf       	rjmp	.-2      	; 0xbe4 <__stop_program>
