
Alarm_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  00000bb2  00000c46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000d6  008000d6  00000cbc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001879  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aba  00000000  00000000  0000275d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d06  00000000  00000000  00003217  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00003f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000681  00000000  00000000  000041d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085b  00000000  00000000  00004859  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000050b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3d       	cpi	r26, 0xD6	; 214
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ed       	ldi	r26, 0xD6	; 214
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3d       	cpi	r26, 0xDC	; 220
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <main>
  8a:	0c 94 d7 05 	jmp	0xbae	; 0xbae <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_init>:
#include <avr/io.h>
#include <util/delay.h>
#include "I2C.h"

void I2C_init(){
	TWBR = 0x40;
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	80 b9       	out	0x00, r24	; 0
  96:	08 95       	ret

00000098 <LCD_Send_Half_Byte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	90 e1       	ldi	r25, 0x10	; 16
  9a:	9a 95       	dec	r25
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_Send_Half_Byte+0x2>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_Send_Half_Byte+0x8>
	LCD_Send_Byte(0x6, 0); 
	_delay_ms(1);
}
void LCD_Send_Half_Byte(uint8_t half_byte) {
	_delay_us(50);
	half_byte = (half_byte << 2) & 0x3C;
  a0:	88 0f       	add	r24, r24
  a2:	88 0f       	add	r24, r24
	Enable_1;
  a4:	ae 9a       	sbi	0x15, 6	; 21
	PORTC &= 0xC3;
  a6:	95 b3       	in	r25, 0x15	; 21
  a8:	93 7c       	andi	r25, 0xC3	; 195
  aa:	95 bb       	out	0x15, r25	; 21
	PORTC |= half_byte;
  ac:	95 b3       	in	r25, 0x15	; 21
  ae:	8c 73       	andi	r24, 0x3C	; 60
  b0:	89 2b       	or	r24, r25
  b2:	85 bb       	out	0x15, r24	; 21
	Enable_0;
  b4:	ae 98       	cbi	0x15, 6	; 21
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	8a 95       	dec	r24
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_Send_Half_Byte+0x20>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_Send_Half_Byte+0x26>
  be:	08 95       	ret

000000c0 <LCD_Send_Byte>:
	_delay_us(50);
}

void LCD_Send_Byte(uint8_t byte, uint8_t mode) {
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
	if (mode == 0) RS_0;
  c4:	61 11       	cpse	r22, r1
  c6:	02 c0       	rjmp	.+4      	; 0xcc <LCD_Send_Byte+0xc>
  c8:	af 98       	cbi	0x15, 7	; 21
  ca:	01 c0       	rjmp	.+2      	; 0xce <LCD_Send_Byte+0xe>
	else RS_1;
  cc:	af 9a       	sbi	0x15, 7	; 21

	uint8_t half_byte_high = (byte >> 4) & 0x0F;
	uint8_t half_byte_low = byte & 0x0F;
	LCD_Send_Half_Byte(half_byte_high);
  ce:	8c 2f       	mov	r24, r28
  d0:	82 95       	swap	r24
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
	LCD_Send_Half_Byte(half_byte_low);
  d8:	8c 2f       	mov	r24, r28
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
}
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	85 ea       	ldi	r24, 0xA5	; 165
  e6:	9e e0       	ldi	r25, 0x0E	; 14
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_Init+0x4>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_Init+0xa>
  ee:	00 00       	nop
#include "LCD.h"

void LCD_Init(){
	_delay_ms(15);
	LCD_Send_Half_Byte(0x3);
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
  f6:	87 ee       	ldi	r24, 0xE7	; 231
  f8:	93 e0       	ldi	r25, 0x03	; 3
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Init+0x16>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_Init+0x1c>
 100:	00 00       	nop
	_delay_ms(4);
	LCD_Send_Half_Byte(0x3);
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
 108:	87 ea       	ldi	r24, 0xA7	; 167
 10a:	91 e6       	ldi	r25, 0x61	; 97
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_Init+0x28>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_Init+0x2e>
 112:	00 00       	nop
	_delay_ms(100);
	LCD_Send_Half_Byte(0x3);
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
 11a:	89 ef       	ldi	r24, 0xF9	; 249
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_Init+0x3a>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_Init+0x40>
 124:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Half_Byte(0x2);
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
 12c:	89 ef       	ldi	r24, 0xF9	; 249
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_Init+0x4c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_Init+0x52>
 136:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Byte(0x28, 0);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	88 e2       	ldi	r24, 0x28	; 40
 13c:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_Init+0x60>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_Init+0x66>
 14a:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Byte(0xC, 0); 
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	8c e0       	ldi	r24, 0x0C	; 12
 150:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
 154:	89 ef       	ldi	r24, 0xF9	; 249
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_Init+0x74>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_Init+0x7a>
 15e:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Byte(0x6, 0); 
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
 168:	89 ef       	ldi	r24, 0xF9	; 249
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Init+0x88>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Init+0x8e>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <LCD_Send_Char>:
	LCD_Send_Half_Byte(half_byte_high);
	LCD_Send_Half_Byte(half_byte_low);
}

void LCD_Send_Char(uint8_t byte){
	LCD_Send_Byte(byte, 1);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
 17c:	08 95       	ret

0000017e <LCD_Set_Cursor>:
}
void LCD_Set_Cursor(uint8_t horizontal, uint8_t vertical){
	uint8_t position = 0;
	position = (0x40 * vertical + horizontal)|0x80;
	LCD_Send_Byte(position, 0);
 17e:	90 e4       	ldi	r25, 0x40	; 64
 180:	69 9f       	mul	r22, r25
 182:	80 0d       	add	r24, r0
 184:	11 24       	eor	r1, r1
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
 18e:	08 95       	ret

00000190 <LCD_Clear>:
}
void LCD_Clear(){
	LCD_Send_Byte(0x1, 0);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	86 e7       	ldi	r24, 0x76	; 118
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Clear+0xc>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_Clear+0x12>
 1a2:	00 00       	nop
 1a4:	08 95       	ret

000001a6 <LCD_String>:
	_delay_us(1500);
}

void LCD_String(char* message){
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ec 01       	movw	r28, r24
	for(int i = 0; message[i] != '\0'; i++){
 1ac:	88 81       	ld	r24, Y
 1ae:	88 23       	and	r24, r24
 1b0:	31 f0       	breq	.+12     	; 0x1be <LCD_String+0x18>
 1b2:	21 96       	adiw	r28, 0x01	; 1
		LCD_Send_Char(message[i]);
 1b4:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_Send_Char>
	LCD_Send_Byte(0x1, 0);
	_delay_us(1500);
}

void LCD_String(char* message){
	for(int i = 0; message[i] != '\0'; i++){
 1b8:	89 91       	ld	r24, Y+
 1ba:	81 11       	cpse	r24, r1
 1bc:	fb cf       	rjmp	.-10     	; 0x1b4 <LCD_String+0xe>
		LCD_Send_Char(message[i]);
	}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <GPIO_Init>:
	UART_init(51);
}

void GPIO_Init(){
	//Configuring Led
	DDRD  |=   (1 << Led_Blue)|(1 << Led_Red);
 1c4:	81 b3       	in	r24, 0x11	; 17
 1c6:	80 66       	ori	r24, 0x60	; 96
 1c8:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~((1 << Led_Blue)|(1 << Led_Red));
 1ca:	82 b3       	in	r24, 0x12	; 18
 1cc:	8f 79       	andi	r24, 0x9F	; 159
 1ce:	82 bb       	out	0x12, r24	; 18
	//Configuring Buttons
	DDRB  &= ~((1 << Button_Ok)|(1 << Button_Set));
 1d0:	87 b3       	in	r24, 0x17	; 23
 1d2:	8c 7f       	andi	r24, 0xFC	; 252
 1d4:	87 bb       	out	0x17, r24	; 23
	PORTB |=  (1 << Button_Ok)|(1 << Button_Set);
 1d6:	88 b3       	in	r24, 0x18	; 24
 1d8:	83 60       	ori	r24, 0x03	; 3
 1da:	88 bb       	out	0x18, r24	; 24
	//Configuring Buzzer
	DDRA  |=  (1 << Buzzer);
 1dc:	d0 9a       	sbi	0x1a, 0	; 26
	PORTA &= ~(1 << Buzzer);
 1de:	d8 98       	cbi	0x1b, 0	; 27
	//Configuring LCD pins
	DDRC  =  255;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	84 bb       	out	0x14, r24	; 20
	PORTC =  0;
 1e4:	15 ba       	out	0x15, r1	; 21
 1e6:	08 95       	ret

000001e8 <MCU_Init>:
#include "MCU_Init.h"
#include "Timer.h"
#include "LCD.h"

void MCU_Init(){
	Timer_Init();
 1e8:	0e 94 1b 01 	call	0x236	; 0x236 <Timer_Init>
	GPIO_Init();
 1ec:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <GPIO_Init>
	LCD_Init();
 1f0:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_Init>
	I2C_init();
 1f4:	0e 94 49 00 	call	0x92	; 0x92 <I2C_init>
	UART_init(51);
 1f8:	83 e3       	ldi	r24, 0x33	; 51
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 28 01 	call	0x250	; 0x250 <UART_init>
 200:	08 95       	ret

00000202 <__vector_6>:
#include "Timer.h"
volatile uint8_t timer_flag = 0;
ISR(TIMER1_COMPA_vect){
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
	if(timer_flag == 0)
 20e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 212:	81 11       	cpse	r24, r1
 214:	04 c0       	rjmp	.+8      	; 0x21e <__vector_6+0x1c>
		timer_flag = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
 21c:	06 c0       	rjmp	.+12     	; 0x22a <__vector_6+0x28>
	else if(timer_flag == 1)
 21e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	11 f4       	brne	.+4      	; 0x22a <__vector_6+0x28>
		timer_flag = 0;
 226:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__data_end>
}
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <Timer_Init>:

void Timer_Init(){
	TCCR1B |= (1 << WGM12);
 236:	8e b5       	in	r24, 0x2e	; 46
 238:	88 60       	ori	r24, 0x08	; 8
 23a:	8e bd       	out	0x2e, r24	; 46
	TIMSK  |= (1 << OCIE1A);
 23c:	89 b7       	in	r24, 0x39	; 57
 23e:	80 61       	ori	r24, 0x10	; 16
 240:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0x00;
 242:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0xFF;
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << CS12);
 248:	8e b5       	in	r24, 0x2e	; 46
 24a:	84 60       	ori	r24, 0x04	; 4
 24c:	8e bd       	out	0x2e, r24	; 46
 24e:	08 95       	ret

00000250 <UART_init>:
#include "UART.h"

void UART_init(unsigned int speed){
	UBRRH = (unsigned char)(speed>>8);
 250:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)speed;
 252:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1 << RXEN)|(1 << TXEN);
 254:	88 e1       	ldi	r24, 0x18	; 24
 256:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (1 << RXCIE);
 258:	57 9a       	sbi	0x0a, 7	; 10
	UCSRC = (1 << URSEL)|(1 << USBS)|(1 << UCSZ1)|(1 << UCSZ0);
 25a:	8e e8       	ldi	r24, 0x8E	; 142
 25c:	80 bd       	out	0x20, r24	; 32
 25e:	08 95       	ret

00000260 <Get_Current_Value_Ptr>:
		*value_ptr = 0;
	}
}


void Save_Setting(){
 260:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <selected_parameter>
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	19 f4       	brne	.+6      	; 0x26e <Get_Current_Value_Ptr+0xe>
 268:	81 e6       	ldi	r24, 0x61	; 97
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	08 95       	ret
 26e:	82 e6       	ldi	r24, 0x62	; 98
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	08 95       	ret

00000274 <Get_Current_Value>:
 274:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <selected_parameter>
 278:	88 23       	and	r24, r24
 27a:	19 f0       	breq	.+6      	; 0x282 <Get_Current_Value+0xe>
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	21 f0       	breq	.+8      	; 0x288 <Get_Current_Value+0x14>
 280:	06 c0       	rjmp	.+12     	; 0x28e <Get_Current_Value+0x1a>
 282:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hours>
 286:	08 95       	ret
 288:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <minutes>
 28c:	08 95       	ret
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret

00000292 <Alarm_Get_Current_Value>:
 292:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <selected_parameter>
 296:	88 23       	and	r24, r24
 298:	19 f0       	breq	.+6      	; 0x2a0 <Alarm_Get_Current_Value+0xe>
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	21 f0       	breq	.+8      	; 0x2a6 <Alarm_Get_Current_Value+0x14>
 29e:	06 c0       	rjmp	.+12     	; 0x2ac <Alarm_Get_Current_Value+0x1a>
 2a0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <alarm_hours>
 2a4:	08 95       	ret
 2a6:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <alarm_minutes>
 2aa:	08 95       	ret
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	08 95       	ret

000002b0 <Display_Current_Setting>:
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	00 d0       	rcall	.+0      	; 0x2ba <Display_Current_Setting+0xa>
 2ba:	1f 92       	push	r1
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	88 23       	and	r24, r24
 2c2:	21 f0       	breq	.+8      	; 0x2cc <Display_Current_Setting+0x1c>
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	09 f4       	brne	.+2      	; 0x2ca <Display_Current_Setting+0x1a>
 2c8:	41 c0       	rjmp	.+130    	; 0x34c <Display_Current_Setting+0x9c>
 2ca:	7e c0       	rjmp	.+252    	; 0x3c8 <Display_Current_Setting+0x118>
 2cc:	0e 94 3a 01 	call	0x274	; 0x274 <Get_Current_Value>
 2d0:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 2d4:	89 17       	cp	r24, r25
 2d6:	09 f4       	brne	.+2      	; 0x2da <Display_Current_Setting+0x2a>
 2d8:	77 c0       	rjmp	.+238    	; 0x3c8 <Display_Current_Setting+0x118>
 2da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 2de:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
 2ea:	83 e6       	ldi	r24, 0x63	; 99
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 2f2:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <selected_parameter>
 2f6:	88 23       	and	r24, r24
 2f8:	19 f0       	breq	.+6      	; 0x300 <Display_Current_Setting+0x50>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	31 f0       	breq	.+12     	; 0x30a <Display_Current_Setting+0x5a>
 2fe:	09 c0       	rjmp	.+18     	; 0x312 <Display_Current_Setting+0x62>
 300:	88 e6       	ldi	r24, 0x68	; 104
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 308:	04 c0       	rjmp	.+8      	; 0x312 <Display_Current_Setting+0x62>
 30a:	80 e7       	ldi	r24, 0x70	; 112
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 312:	0e 94 3a 01 	call	0x274	; 0x274 <Get_Current_Value>
 316:	1f 92       	push	r1
 318:	8f 93       	push	r24
 31a:	8a e7       	ldi	r24, 0x7A	; 122
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	9f 93       	push	r25
 320:	8f 93       	push	r24
 322:	8e 01       	movw	r16, r28
 324:	0f 5f       	subi	r16, 0xFF	; 255
 326:	1f 4f       	sbci	r17, 0xFF	; 255
 328:	1f 93       	push	r17
 32a:	0f 93       	push	r16
 32c:	0e 94 ed 02 	call	0x5da	; 0x5da <sprintf>
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
 338:	c8 01       	movw	r24, r16
 33a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	3e c0       	rjmp	.+124    	; 0x3c8 <Display_Current_Setting+0x118>
 34c:	0e 94 49 01 	call	0x292	; 0x292 <Alarm_Get_Current_Value>
 350:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 354:	89 17       	cp	r24, r25
 356:	c1 f1       	breq	.+112    	; 0x3c8 <Display_Current_Setting+0x118>
 358:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 35c:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
 368:	83 e6       	ldi	r24, 0x63	; 99
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 370:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <selected_parameter>
 374:	88 23       	and	r24, r24
 376:	19 f0       	breq	.+6      	; 0x37e <Display_Current_Setting+0xce>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	31 f0       	breq	.+12     	; 0x388 <Display_Current_Setting+0xd8>
 37c:	09 c0       	rjmp	.+18     	; 0x390 <Display_Current_Setting+0xe0>
 37e:	88 e6       	ldi	r24, 0x68	; 104
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 386:	04 c0       	rjmp	.+8      	; 0x390 <Display_Current_Setting+0xe0>
 388:	80 e7       	ldi	r24, 0x70	; 112
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 390:	0e 94 49 01 	call	0x292	; 0x292 <Alarm_Get_Current_Value>
 394:	1f 92       	push	r1
 396:	8f 93       	push	r24
 398:	8a e7       	ldi	r24, 0x7A	; 122
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	9f 93       	push	r25
 39e:	8f 93       	push	r24
 3a0:	8e 01       	movw	r16, r28
 3a2:	0f 5f       	subi	r16, 0xFF	; 255
 3a4:	1f 4f       	sbci	r17, 0xFF	; 255
 3a6:	1f 93       	push	r17
 3a8:	0f 93       	push	r16
 3aa:	0e 94 ed 02 	call	0x5da	; 0x5da <sprintf>
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
 3b6:	c8 01       	movw	r24, r16
 3b8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	08 95       	ret

000003d8 <Display_Time>:
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
 3e0:	8f e7       	ldi	r24, 0x7F	; 127
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 3e8:	08 95       	ret

000003ea <Increase_Value>:
 3ea:	0e 94 30 01 	call	0x260	; 0x260 <Get_Current_Value_Ptr>
 3ee:	dc 01       	movw	r26, r24
 3f0:	9c 91       	ld	r25, X
 3f2:	9f 5f       	subi	r25, 0xFF	; 255
 3f4:	9c 93       	st	X, r25
 3f6:	e0 91 d9 00 	lds	r30, 0x00D9	; 0x8000d9 <selected_parameter>
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	e1 53       	subi	r30, 0x31	; 49
 3fe:	ff 4f       	sbci	r31, 0xFF	; 255
 400:	80 81       	ld	r24, Z
 402:	89 17       	cp	r24, r25
 404:	08 f4       	brcc	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	1c 92       	st	X, r1
 408:	08 95       	ret

0000040a <Enter_Set_Time_Mode>:
	
}
void Enter_Set_Time_Mode(){
	LCD_Clear();
 40a:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
	LCD_Set_Cursor(0, 0);
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
	LCD_String("Set time");
 416:	84 eb       	ldi	r24, 0xB4	; 180
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
	
	while(1){
		Display_Current_Setting(0);
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Display_Current_Setting>
		if(!(PINB & (1 << Button_Ok))){
 424:	b0 99       	sbic	0x16, 0	; 22
 426:	08 c0       	rjmp	.+16     	; 0x438 <Enter_Set_Time_Mode+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 428:	83 e2       	ldi	r24, 0x23	; 35
 42a:	94 ef       	ldi	r25, 0xF4	; 244
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <Enter_Set_Time_Mode+0x22>
 430:	00 c0       	rjmp	.+0      	; 0x432 <Enter_Set_Time_Mode+0x28>
 432:	00 00       	nop
			_delay_ms(250);
			Increase_Value();
 434:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Increase_Value>
		}
		if(!(PINB & (1 << Button_Set))){
 438:	b1 99       	sbic	0x16, 1	; 22
 43a:	f1 cf       	rjmp	.-30     	; 0x41e <Enter_Set_Time_Mode+0x14>
 43c:	83 e2       	ldi	r24, 0x23	; 35
 43e:	94 ef       	ldi	r25, 0xF4	; 244
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <Enter_Set_Time_Mode+0x36>
 444:	00 c0       	rjmp	.+0      	; 0x446 <Enter_Set_Time_Mode+0x3c>
 446:	00 00       	nop
			_delay_ms(250);
			selected_parameter++;
 448:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <selected_parameter>
 44c:	8f 5f       	subi	r24, 0xFF	; 255
 44e:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <selected_parameter>
			if(selected_parameter > 1){
 452:	82 30       	cpi	r24, 0x02	; 2
 454:	20 f3       	brcs	.-56     	; 0x41e <Enter_Set_Time_Mode+0x14>
				selected_parameter = 0;
 456:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <selected_parameter>
 45a:	08 95       	ret

0000045c <Enter_Set_Alarm_Mode>:
		
	}
}

void Enter_Set_Alarm_Mode(){
	LCD_Clear();
 45c:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
	LCD_Set_Cursor(0, 0);
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
	LCD_String("Set alarm:");
 468:	80 e9       	ldi	r24, 0x90	; 144
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
	
	while(1){
		Display_Current_Setting(1);
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Display_Current_Setting>
		if(!(PINB & (1 << Button_Ok))){
 476:	b0 99       	sbic	0x16, 0	; 22
 478:	08 c0       	rjmp	.+16     	; 0x48a <__stack+0x2b>
 47a:	83 e2       	ldi	r24, 0x23	; 35
 47c:	94 ef       	ldi	r25, 0xF4	; 244
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <__stack+0x1f>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__stack+0x25>
 484:	00 00       	nop
			_delay_ms(250);
			Increase_Value();
 486:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Increase_Value>
		}
		if(!(PINB & (1 << Button_Set))){
 48a:	b1 99       	sbic	0x16, 1	; 22
 48c:	f1 cf       	rjmp	.-30     	; 0x470 <__stack+0x11>
 48e:	83 e2       	ldi	r24, 0x23	; 35
 490:	94 ef       	ldi	r25, 0xF4	; 244
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <__stack+0x33>
 496:	00 c0       	rjmp	.+0      	; 0x498 <__stack+0x39>
 498:	00 00       	nop
			_delay_ms(250);
			selected_parameter++;
 49a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <selected_parameter>
 49e:	8f 5f       	subi	r24, 0xFF	; 255
 4a0:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <selected_parameter>
			if(selected_parameter > 1){
 4a4:	82 30       	cpi	r24, 0x02	; 2
 4a6:	20 f3       	brcs	.-56     	; 0x470 <__stack+0x11>
				selected_parameter = 0;
 4a8:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <selected_parameter>
 4ac:	08 95       	ret

000004ae <Clock_Alarm>:
	}
}

void Clock_Alarm(){
	
	if (Current_Mode == MODE_NORMAL) {
 4ae:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <Current_Mode>
 4b2:	81 11       	cpse	r24, r1
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <Clock_Alarm+0xc>
		
		Display_Time();
 4b6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Display_Time>
	}
	if(!(PINB & (1 << Button_Ok))){
 4ba:	b0 99       	sbic	0x16, 0	; 22
 4bc:	63 c0       	rjmp	.+198    	; 0x584 <Clock_Alarm+0xd6>
 4be:	83 e2       	ldi	r24, 0x23	; 35
 4c0:	94 ef       	ldi	r25, 0xF4	; 244
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <Clock_Alarm+0x14>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <Clock_Alarm+0x1a>
 4c8:	00 00       	nop
		_delay_ms(250);
		switch(Current_Mode){
 4ca:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <Current_Mode>
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	01 f1       	breq	.+64     	; 0x512 <Clock_Alarm+0x64>
 4d2:	38 f0       	brcs	.+14     	; 0x4e2 <Clock_Alarm+0x34>
 4d4:	82 30       	cpi	r24, 0x02	; 2
 4d6:	09 f4       	brne	.+2      	; 0x4da <Clock_Alarm+0x2c>
 4d8:	4b c0       	rjmp	.+150    	; 0x570 <Clock_Alarm+0xc2>
 4da:	83 30       	cpi	r24, 0x03	; 3
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <Clock_Alarm+0x32>
 4de:	4d c0       	rjmp	.+154    	; 0x57a <Clock_Alarm+0xcc>
 4e0:	51 c0       	rjmp	.+162    	; 0x584 <Clock_Alarm+0xd6>
			case MODE_NORMAL:
				Current_Mode = MODE_MENU;
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <Current_Mode>
				flag_set = 0;
 4e8:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <flag_set>
				LCD_Clear();
 4ec:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
				LCD_Set_Cursor(0, 0);
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
				LCD_String("* Set time");
 4f8:	8b e9       	ldi	r24, 0x9B	; 155
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
				LCD_Set_Cursor(0, 1);
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
				LCD_String("  Set alarm");
 508:	86 ea       	ldi	r24, 0xA6	; 166
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
			break;
 510:	39 c0       	rjmp	.+114    	; 0x584 <Clock_Alarm+0xd6>
			
			case MODE_MENU:
				if (flag_set == 0) {
 512:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <flag_set>
 516:	81 11       	cpse	r24, r1
 518:	16 c0       	rjmp	.+44     	; 0x546 <Clock_Alarm+0x98>
					LCD_Clear();
 51a:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
					LCD_Set_Cursor(0, 0);
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
					LCD_String("  Set time");
 526:	82 eb       	ldi	r24, 0xB2	; 178
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
					LCD_Set_Cursor(0, 1);
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
					LCD_String("* Set alarm");
 536:	8d eb       	ldi	r24, 0xBD	; 189
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
					flag_set = 1;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <flag_set>
 544:	1f c0       	rjmp	.+62     	; 0x584 <Clock_Alarm+0xd6>
					} else {
					LCD_Clear();
 546:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
					LCD_Set_Cursor(0, 0);
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
					LCD_String("* Set time");
 552:	8b e9       	ldi	r24, 0x9B	; 155
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
					LCD_Set_Cursor(0, 1);
 55a:	61 e0       	ldi	r22, 0x01	; 1
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
					LCD_String("  Set alarm");
 562:	86 ea       	ldi	r24, 0xA6	; 166
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
					flag_set = 0;
 56a:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <flag_set>
 56e:	0a c0       	rjmp	.+20     	; 0x584 <Clock_Alarm+0xd6>
				}
			break;
			case MODE_SET_TIME:
				Enter_Set_Time_Mode();
 570:	0e 94 05 02 	call	0x40a	; 0x40a <Enter_Set_Time_Mode>
				Current_Mode = MODE_NORMAL; 
 574:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <Current_Mode>
			break;
 578:	23 c0       	rjmp	.+70     	; 0x5c0 <Clock_Alarm+0x112>

			case MODE_SET_ALARM:
				Enter_Set_Alarm_Mode();
 57a:	0e 94 2e 02 	call	0x45c	; 0x45c <Enter_Set_Alarm_Mode>
				Current_Mode = MODE_NORMAL; 
 57e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <Current_Mode>
			break;
 582:	1e c0       	rjmp	.+60     	; 0x5c0 <Clock_Alarm+0x112>
		}
	}
	if(!(PINB & (1 << Button_Set)) && Current_Mode == MODE_MENU){
 584:	b1 99       	sbic	0x16, 1	; 22
 586:	1d c0       	rjmp	.+58     	; 0x5c2 <Clock_Alarm+0x114>
 588:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <Current_Mode>
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	c9 f4       	brne	.+50     	; 0x5c2 <Clock_Alarm+0x114>
 590:	83 e2       	ldi	r24, 0x23	; 35
 592:	94 ef       	ldi	r25, 0xF4	; 244
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <Clock_Alarm+0xe6>
 598:	00 c0       	rjmp	.+0      	; 0x59a <Clock_Alarm+0xec>
 59a:	00 00       	nop
		_delay_ms(250);
		if (flag_set == 0) {
 59c:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <flag_set>
 5a0:	81 11       	cpse	r24, r1
 5a2:	07 c0       	rjmp	.+14     	; 0x5b2 <Clock_Alarm+0x104>
			Enter_Set_Time_Mode();
 5a4:	0e 94 05 02 	call	0x40a	; 0x40a <Enter_Set_Time_Mode>
			LCD_Clear();
 5a8:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
			Current_Mode = MODE_NORMAL;
 5ac:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <Current_Mode>
 5b0:	08 95       	ret
			} else {
			Enter_Set_Alarm_Mode();
 5b2:	0e 94 2e 02 	call	0x45c	; 0x45c <Enter_Set_Alarm_Mode>
			LCD_Clear();
 5b6:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
			Current_Mode = MODE_NORMAL;
 5ba:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <Current_Mode>
		}
	}
}
 5be:	08 95       	ret
				Enter_Set_Alarm_Mode();
				Current_Mode = MODE_NORMAL; 
			break;
		}
	}
	if(!(PINB & (1 << Button_Set)) && Current_Mode == MODE_MENU){
 5c0:	86 b3       	in	r24, 0x16	; 22
 5c2:	08 95       	ret

000005c4 <main>:
	}
}

int main(void){
	
	MCU_Init();
 5c4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCU_Init>
	//sei();
	LCD_Clear();
 5c8:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
	LCD_String("Alarm");
 5cc:	89 ec       	ldi	r24, 0xC9	; 201
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
	while (1){
		Clock_Alarm();
 5d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <Clock_Alarm>
 5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <main+0x10>

000005da <sprintf>:
 5da:	ae e0       	ldi	r26, 0x0E	; 14
 5dc:	b0 e0       	ldi	r27, 0x00	; 0
 5de:	e3 ef       	ldi	r30, 0xF3	; 243
 5e0:	f2 e0       	ldi	r31, 0x02	; 2
 5e2:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__prologue_saves__+0x1c>
 5e6:	0d 89       	ldd	r16, Y+21	; 0x15
 5e8:	1e 89       	ldd	r17, Y+22	; 0x16
 5ea:	86 e0       	ldi	r24, 0x06	; 6
 5ec:	8c 83       	std	Y+4, r24	; 0x04
 5ee:	1a 83       	std	Y+2, r17	; 0x02
 5f0:	09 83       	std	Y+1, r16	; 0x01
 5f2:	8f ef       	ldi	r24, 0xFF	; 255
 5f4:	9f e7       	ldi	r25, 0x7F	; 127
 5f6:	9e 83       	std	Y+6, r25	; 0x06
 5f8:	8d 83       	std	Y+5, r24	; 0x05
 5fa:	ae 01       	movw	r20, r28
 5fc:	47 5e       	subi	r20, 0xE7	; 231
 5fe:	5f 4f       	sbci	r21, 0xFF	; 255
 600:	6f 89       	ldd	r22, Y+23	; 0x17
 602:	78 8d       	ldd	r23, Y+24	; 0x18
 604:	ce 01       	movw	r24, r28
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	0e 94 0f 03 	call	0x61e	; 0x61e <vfprintf>
 60c:	ef 81       	ldd	r30, Y+7	; 0x07
 60e:	f8 85       	ldd	r31, Y+8	; 0x08
 610:	e0 0f       	add	r30, r16
 612:	f1 1f       	adc	r31, r17
 614:	10 82       	st	Z, r1
 616:	2e 96       	adiw	r28, 0x0e	; 14
 618:	e4 e0       	ldi	r30, 0x04	; 4
 61a:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__epilogue_restores__+0x1c>

0000061e <vfprintf>:
 61e:	ab e0       	ldi	r26, 0x0B	; 11
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	e5 e1       	ldi	r30, 0x15	; 21
 624:	f3 e0       	ldi	r31, 0x03	; 3
 626:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__prologue_saves__>
 62a:	6c 01       	movw	r12, r24
 62c:	7b 01       	movw	r14, r22
 62e:	8a 01       	movw	r16, r20
 630:	fc 01       	movw	r30, r24
 632:	17 82       	std	Z+7, r1	; 0x07
 634:	16 82       	std	Z+6, r1	; 0x06
 636:	83 81       	ldd	r24, Z+3	; 0x03
 638:	81 ff       	sbrs	r24, 1
 63a:	cc c1       	rjmp	.+920    	; 0x9d4 <vfprintf+0x3b6>
 63c:	ce 01       	movw	r24, r28
 63e:	01 96       	adiw	r24, 0x01	; 1
 640:	3c 01       	movw	r6, r24
 642:	f6 01       	movw	r30, r12
 644:	93 81       	ldd	r25, Z+3	; 0x03
 646:	f7 01       	movw	r30, r14
 648:	93 fd       	sbrc	r25, 3
 64a:	85 91       	lpm	r24, Z+
 64c:	93 ff       	sbrs	r25, 3
 64e:	81 91       	ld	r24, Z+
 650:	7f 01       	movw	r14, r30
 652:	88 23       	and	r24, r24
 654:	09 f4       	brne	.+2      	; 0x658 <vfprintf+0x3a>
 656:	ba c1       	rjmp	.+884    	; 0x9cc <vfprintf+0x3ae>
 658:	85 32       	cpi	r24, 0x25	; 37
 65a:	39 f4       	brne	.+14     	; 0x66a <vfprintf+0x4c>
 65c:	93 fd       	sbrc	r25, 3
 65e:	85 91       	lpm	r24, Z+
 660:	93 ff       	sbrs	r25, 3
 662:	81 91       	ld	r24, Z+
 664:	7f 01       	movw	r14, r30
 666:	85 32       	cpi	r24, 0x25	; 37
 668:	29 f4       	brne	.+10     	; 0x674 <vfprintf+0x56>
 66a:	b6 01       	movw	r22, r12
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 06 05 	call	0xa0c	; 0xa0c <fputc>
 672:	e7 cf       	rjmp	.-50     	; 0x642 <vfprintf+0x24>
 674:	91 2c       	mov	r9, r1
 676:	21 2c       	mov	r2, r1
 678:	31 2c       	mov	r3, r1
 67a:	ff e1       	ldi	r31, 0x1F	; 31
 67c:	f3 15       	cp	r31, r3
 67e:	d8 f0       	brcs	.+54     	; 0x6b6 <vfprintf+0x98>
 680:	8b 32       	cpi	r24, 0x2B	; 43
 682:	79 f0       	breq	.+30     	; 0x6a2 <vfprintf+0x84>
 684:	38 f4       	brcc	.+14     	; 0x694 <vfprintf+0x76>
 686:	80 32       	cpi	r24, 0x20	; 32
 688:	79 f0       	breq	.+30     	; 0x6a8 <vfprintf+0x8a>
 68a:	83 32       	cpi	r24, 0x23	; 35
 68c:	a1 f4       	brne	.+40     	; 0x6b6 <vfprintf+0x98>
 68e:	23 2d       	mov	r18, r3
 690:	20 61       	ori	r18, 0x10	; 16
 692:	1d c0       	rjmp	.+58     	; 0x6ce <vfprintf+0xb0>
 694:	8d 32       	cpi	r24, 0x2D	; 45
 696:	61 f0       	breq	.+24     	; 0x6b0 <vfprintf+0x92>
 698:	80 33       	cpi	r24, 0x30	; 48
 69a:	69 f4       	brne	.+26     	; 0x6b6 <vfprintf+0x98>
 69c:	23 2d       	mov	r18, r3
 69e:	21 60       	ori	r18, 0x01	; 1
 6a0:	16 c0       	rjmp	.+44     	; 0x6ce <vfprintf+0xb0>
 6a2:	83 2d       	mov	r24, r3
 6a4:	82 60       	ori	r24, 0x02	; 2
 6a6:	38 2e       	mov	r3, r24
 6a8:	e3 2d       	mov	r30, r3
 6aa:	e4 60       	ori	r30, 0x04	; 4
 6ac:	3e 2e       	mov	r3, r30
 6ae:	2a c0       	rjmp	.+84     	; 0x704 <vfprintf+0xe6>
 6b0:	f3 2d       	mov	r31, r3
 6b2:	f8 60       	ori	r31, 0x08	; 8
 6b4:	1d c0       	rjmp	.+58     	; 0x6f0 <vfprintf+0xd2>
 6b6:	37 fc       	sbrc	r3, 7
 6b8:	2d c0       	rjmp	.+90     	; 0x714 <vfprintf+0xf6>
 6ba:	20 ed       	ldi	r18, 0xD0	; 208
 6bc:	28 0f       	add	r18, r24
 6be:	2a 30       	cpi	r18, 0x0A	; 10
 6c0:	40 f0       	brcs	.+16     	; 0x6d2 <vfprintf+0xb4>
 6c2:	8e 32       	cpi	r24, 0x2E	; 46
 6c4:	b9 f4       	brne	.+46     	; 0x6f4 <vfprintf+0xd6>
 6c6:	36 fc       	sbrc	r3, 6
 6c8:	81 c1       	rjmp	.+770    	; 0x9cc <vfprintf+0x3ae>
 6ca:	23 2d       	mov	r18, r3
 6cc:	20 64       	ori	r18, 0x40	; 64
 6ce:	32 2e       	mov	r3, r18
 6d0:	19 c0       	rjmp	.+50     	; 0x704 <vfprintf+0xe6>
 6d2:	36 fe       	sbrs	r3, 6
 6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <vfprintf+0xc4>
 6d6:	8a e0       	ldi	r24, 0x0A	; 10
 6d8:	98 9e       	mul	r9, r24
 6da:	20 0d       	add	r18, r0
 6dc:	11 24       	eor	r1, r1
 6de:	92 2e       	mov	r9, r18
 6e0:	11 c0       	rjmp	.+34     	; 0x704 <vfprintf+0xe6>
 6e2:	ea e0       	ldi	r30, 0x0A	; 10
 6e4:	2e 9e       	mul	r2, r30
 6e6:	20 0d       	add	r18, r0
 6e8:	11 24       	eor	r1, r1
 6ea:	22 2e       	mov	r2, r18
 6ec:	f3 2d       	mov	r31, r3
 6ee:	f0 62       	ori	r31, 0x20	; 32
 6f0:	3f 2e       	mov	r3, r31
 6f2:	08 c0       	rjmp	.+16     	; 0x704 <vfprintf+0xe6>
 6f4:	8c 36       	cpi	r24, 0x6C	; 108
 6f6:	21 f4       	brne	.+8      	; 0x700 <vfprintf+0xe2>
 6f8:	83 2d       	mov	r24, r3
 6fa:	80 68       	ori	r24, 0x80	; 128
 6fc:	38 2e       	mov	r3, r24
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <vfprintf+0xe6>
 700:	88 36       	cpi	r24, 0x68	; 104
 702:	41 f4       	brne	.+16     	; 0x714 <vfprintf+0xf6>
 704:	f7 01       	movw	r30, r14
 706:	93 fd       	sbrc	r25, 3
 708:	85 91       	lpm	r24, Z+
 70a:	93 ff       	sbrs	r25, 3
 70c:	81 91       	ld	r24, Z+
 70e:	7f 01       	movw	r14, r30
 710:	81 11       	cpse	r24, r1
 712:	b3 cf       	rjmp	.-154    	; 0x67a <vfprintf+0x5c>
 714:	98 2f       	mov	r25, r24
 716:	9f 7d       	andi	r25, 0xDF	; 223
 718:	95 54       	subi	r25, 0x45	; 69
 71a:	93 30       	cpi	r25, 0x03	; 3
 71c:	28 f4       	brcc	.+10     	; 0x728 <vfprintf+0x10a>
 71e:	0c 5f       	subi	r16, 0xFC	; 252
 720:	1f 4f       	sbci	r17, 0xFF	; 255
 722:	9f e3       	ldi	r25, 0x3F	; 63
 724:	99 83       	std	Y+1, r25	; 0x01
 726:	0d c0       	rjmp	.+26     	; 0x742 <vfprintf+0x124>
 728:	83 36       	cpi	r24, 0x63	; 99
 72a:	31 f0       	breq	.+12     	; 0x738 <vfprintf+0x11a>
 72c:	83 37       	cpi	r24, 0x73	; 115
 72e:	71 f0       	breq	.+28     	; 0x74c <vfprintf+0x12e>
 730:	83 35       	cpi	r24, 0x53	; 83
 732:	09 f0       	breq	.+2      	; 0x736 <vfprintf+0x118>
 734:	59 c0       	rjmp	.+178    	; 0x7e8 <vfprintf+0x1ca>
 736:	21 c0       	rjmp	.+66     	; 0x77a <vfprintf+0x15c>
 738:	f8 01       	movw	r30, r16
 73a:	80 81       	ld	r24, Z
 73c:	89 83       	std	Y+1, r24	; 0x01
 73e:	0e 5f       	subi	r16, 0xFE	; 254
 740:	1f 4f       	sbci	r17, 0xFF	; 255
 742:	88 24       	eor	r8, r8
 744:	83 94       	inc	r8
 746:	91 2c       	mov	r9, r1
 748:	53 01       	movw	r10, r6
 74a:	13 c0       	rjmp	.+38     	; 0x772 <vfprintf+0x154>
 74c:	28 01       	movw	r4, r16
 74e:	f2 e0       	ldi	r31, 0x02	; 2
 750:	4f 0e       	add	r4, r31
 752:	51 1c       	adc	r5, r1
 754:	f8 01       	movw	r30, r16
 756:	a0 80       	ld	r10, Z
 758:	b1 80       	ldd	r11, Z+1	; 0x01
 75a:	36 fe       	sbrs	r3, 6
 75c:	03 c0       	rjmp	.+6      	; 0x764 <vfprintf+0x146>
 75e:	69 2d       	mov	r22, r9
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	02 c0       	rjmp	.+4      	; 0x768 <vfprintf+0x14a>
 764:	6f ef       	ldi	r22, 0xFF	; 255
 766:	7f ef       	ldi	r23, 0xFF	; 255
 768:	c5 01       	movw	r24, r10
 76a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <strnlen>
 76e:	4c 01       	movw	r8, r24
 770:	82 01       	movw	r16, r4
 772:	f3 2d       	mov	r31, r3
 774:	ff 77       	andi	r31, 0x7F	; 127
 776:	3f 2e       	mov	r3, r31
 778:	16 c0       	rjmp	.+44     	; 0x7a6 <vfprintf+0x188>
 77a:	28 01       	movw	r4, r16
 77c:	22 e0       	ldi	r18, 0x02	; 2
 77e:	42 0e       	add	r4, r18
 780:	51 1c       	adc	r5, r1
 782:	f8 01       	movw	r30, r16
 784:	a0 80       	ld	r10, Z
 786:	b1 80       	ldd	r11, Z+1	; 0x01
 788:	36 fe       	sbrs	r3, 6
 78a:	03 c0       	rjmp	.+6      	; 0x792 <vfprintf+0x174>
 78c:	69 2d       	mov	r22, r9
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	02 c0       	rjmp	.+4      	; 0x796 <vfprintf+0x178>
 792:	6f ef       	ldi	r22, 0xFF	; 255
 794:	7f ef       	ldi	r23, 0xFF	; 255
 796:	c5 01       	movw	r24, r10
 798:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <strnlen_P>
 79c:	4c 01       	movw	r8, r24
 79e:	f3 2d       	mov	r31, r3
 7a0:	f0 68       	ori	r31, 0x80	; 128
 7a2:	3f 2e       	mov	r3, r31
 7a4:	82 01       	movw	r16, r4
 7a6:	33 fc       	sbrc	r3, 3
 7a8:	1b c0       	rjmp	.+54     	; 0x7e0 <vfprintf+0x1c2>
 7aa:	82 2d       	mov	r24, r2
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	88 16       	cp	r8, r24
 7b0:	99 06       	cpc	r9, r25
 7b2:	b0 f4       	brcc	.+44     	; 0x7e0 <vfprintf+0x1c2>
 7b4:	b6 01       	movw	r22, r12
 7b6:	80 e2       	ldi	r24, 0x20	; 32
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 06 05 	call	0xa0c	; 0xa0c <fputc>
 7be:	2a 94       	dec	r2
 7c0:	f4 cf       	rjmp	.-24     	; 0x7aa <vfprintf+0x18c>
 7c2:	f5 01       	movw	r30, r10
 7c4:	37 fc       	sbrc	r3, 7
 7c6:	85 91       	lpm	r24, Z+
 7c8:	37 fe       	sbrs	r3, 7
 7ca:	81 91       	ld	r24, Z+
 7cc:	5f 01       	movw	r10, r30
 7ce:	b6 01       	movw	r22, r12
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 06 05 	call	0xa0c	; 0xa0c <fputc>
 7d6:	21 10       	cpse	r2, r1
 7d8:	2a 94       	dec	r2
 7da:	21 e0       	ldi	r18, 0x01	; 1
 7dc:	82 1a       	sub	r8, r18
 7de:	91 08       	sbc	r9, r1
 7e0:	81 14       	cp	r8, r1
 7e2:	91 04       	cpc	r9, r1
 7e4:	71 f7       	brne	.-36     	; 0x7c2 <vfprintf+0x1a4>
 7e6:	e8 c0       	rjmp	.+464    	; 0x9b8 <vfprintf+0x39a>
 7e8:	84 36       	cpi	r24, 0x64	; 100
 7ea:	11 f0       	breq	.+4      	; 0x7f0 <vfprintf+0x1d2>
 7ec:	89 36       	cpi	r24, 0x69	; 105
 7ee:	41 f5       	brne	.+80     	; 0x840 <vfprintf+0x222>
 7f0:	f8 01       	movw	r30, r16
 7f2:	37 fe       	sbrs	r3, 7
 7f4:	07 c0       	rjmp	.+14     	; 0x804 <vfprintf+0x1e6>
 7f6:	60 81       	ld	r22, Z
 7f8:	71 81       	ldd	r23, Z+1	; 0x01
 7fa:	82 81       	ldd	r24, Z+2	; 0x02
 7fc:	93 81       	ldd	r25, Z+3	; 0x03
 7fe:	0c 5f       	subi	r16, 0xFC	; 252
 800:	1f 4f       	sbci	r17, 0xFF	; 255
 802:	08 c0       	rjmp	.+16     	; 0x814 <vfprintf+0x1f6>
 804:	60 81       	ld	r22, Z
 806:	71 81       	ldd	r23, Z+1	; 0x01
 808:	07 2e       	mov	r0, r23
 80a:	00 0c       	add	r0, r0
 80c:	88 0b       	sbc	r24, r24
 80e:	99 0b       	sbc	r25, r25
 810:	0e 5f       	subi	r16, 0xFE	; 254
 812:	1f 4f       	sbci	r17, 0xFF	; 255
 814:	f3 2d       	mov	r31, r3
 816:	ff 76       	andi	r31, 0x6F	; 111
 818:	3f 2e       	mov	r3, r31
 81a:	97 ff       	sbrs	r25, 7
 81c:	09 c0       	rjmp	.+18     	; 0x830 <vfprintf+0x212>
 81e:	90 95       	com	r25
 820:	80 95       	com	r24
 822:	70 95       	com	r23
 824:	61 95       	neg	r22
 826:	7f 4f       	sbci	r23, 0xFF	; 255
 828:	8f 4f       	sbci	r24, 0xFF	; 255
 82a:	9f 4f       	sbci	r25, 0xFF	; 255
 82c:	f0 68       	ori	r31, 0x80	; 128
 82e:	3f 2e       	mov	r3, r31
 830:	2a e0       	ldi	r18, 0x0A	; 10
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	a3 01       	movw	r20, r6
 836:	0e 94 42 05 	call	0xa84	; 0xa84 <__ultoa_invert>
 83a:	88 2e       	mov	r8, r24
 83c:	86 18       	sub	r8, r6
 83e:	45 c0       	rjmp	.+138    	; 0x8ca <vfprintf+0x2ac>
 840:	85 37       	cpi	r24, 0x75	; 117
 842:	31 f4       	brne	.+12     	; 0x850 <vfprintf+0x232>
 844:	23 2d       	mov	r18, r3
 846:	2f 7e       	andi	r18, 0xEF	; 239
 848:	b2 2e       	mov	r11, r18
 84a:	2a e0       	ldi	r18, 0x0A	; 10
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	25 c0       	rjmp	.+74     	; 0x89a <vfprintf+0x27c>
 850:	93 2d       	mov	r25, r3
 852:	99 7f       	andi	r25, 0xF9	; 249
 854:	b9 2e       	mov	r11, r25
 856:	8f 36       	cpi	r24, 0x6F	; 111
 858:	c1 f0       	breq	.+48     	; 0x88a <vfprintf+0x26c>
 85a:	18 f4       	brcc	.+6      	; 0x862 <vfprintf+0x244>
 85c:	88 35       	cpi	r24, 0x58	; 88
 85e:	79 f0       	breq	.+30     	; 0x87e <vfprintf+0x260>
 860:	b5 c0       	rjmp	.+362    	; 0x9cc <vfprintf+0x3ae>
 862:	80 37       	cpi	r24, 0x70	; 112
 864:	19 f0       	breq	.+6      	; 0x86c <vfprintf+0x24e>
 866:	88 37       	cpi	r24, 0x78	; 120
 868:	21 f0       	breq	.+8      	; 0x872 <vfprintf+0x254>
 86a:	b0 c0       	rjmp	.+352    	; 0x9cc <vfprintf+0x3ae>
 86c:	e9 2f       	mov	r30, r25
 86e:	e0 61       	ori	r30, 0x10	; 16
 870:	be 2e       	mov	r11, r30
 872:	b4 fe       	sbrs	r11, 4
 874:	0d c0       	rjmp	.+26     	; 0x890 <vfprintf+0x272>
 876:	fb 2d       	mov	r31, r11
 878:	f4 60       	ori	r31, 0x04	; 4
 87a:	bf 2e       	mov	r11, r31
 87c:	09 c0       	rjmp	.+18     	; 0x890 <vfprintf+0x272>
 87e:	34 fe       	sbrs	r3, 4
 880:	0a c0       	rjmp	.+20     	; 0x896 <vfprintf+0x278>
 882:	29 2f       	mov	r18, r25
 884:	26 60       	ori	r18, 0x06	; 6
 886:	b2 2e       	mov	r11, r18
 888:	06 c0       	rjmp	.+12     	; 0x896 <vfprintf+0x278>
 88a:	28 e0       	ldi	r18, 0x08	; 8
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	05 c0       	rjmp	.+10     	; 0x89a <vfprintf+0x27c>
 890:	20 e1       	ldi	r18, 0x10	; 16
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	02 c0       	rjmp	.+4      	; 0x89a <vfprintf+0x27c>
 896:	20 e1       	ldi	r18, 0x10	; 16
 898:	32 e0       	ldi	r19, 0x02	; 2
 89a:	f8 01       	movw	r30, r16
 89c:	b7 fe       	sbrs	r11, 7
 89e:	07 c0       	rjmp	.+14     	; 0x8ae <vfprintf+0x290>
 8a0:	60 81       	ld	r22, Z
 8a2:	71 81       	ldd	r23, Z+1	; 0x01
 8a4:	82 81       	ldd	r24, Z+2	; 0x02
 8a6:	93 81       	ldd	r25, Z+3	; 0x03
 8a8:	0c 5f       	subi	r16, 0xFC	; 252
 8aa:	1f 4f       	sbci	r17, 0xFF	; 255
 8ac:	06 c0       	rjmp	.+12     	; 0x8ba <vfprintf+0x29c>
 8ae:	60 81       	ld	r22, Z
 8b0:	71 81       	ldd	r23, Z+1	; 0x01
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	0e 5f       	subi	r16, 0xFE	; 254
 8b8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ba:	a3 01       	movw	r20, r6
 8bc:	0e 94 42 05 	call	0xa84	; 0xa84 <__ultoa_invert>
 8c0:	88 2e       	mov	r8, r24
 8c2:	86 18       	sub	r8, r6
 8c4:	fb 2d       	mov	r31, r11
 8c6:	ff 77       	andi	r31, 0x7F	; 127
 8c8:	3f 2e       	mov	r3, r31
 8ca:	36 fe       	sbrs	r3, 6
 8cc:	0d c0       	rjmp	.+26     	; 0x8e8 <vfprintf+0x2ca>
 8ce:	23 2d       	mov	r18, r3
 8d0:	2e 7f       	andi	r18, 0xFE	; 254
 8d2:	a2 2e       	mov	r10, r18
 8d4:	89 14       	cp	r8, r9
 8d6:	58 f4       	brcc	.+22     	; 0x8ee <vfprintf+0x2d0>
 8d8:	34 fe       	sbrs	r3, 4
 8da:	0b c0       	rjmp	.+22     	; 0x8f2 <vfprintf+0x2d4>
 8dc:	32 fc       	sbrc	r3, 2
 8de:	09 c0       	rjmp	.+18     	; 0x8f2 <vfprintf+0x2d4>
 8e0:	83 2d       	mov	r24, r3
 8e2:	8e 7e       	andi	r24, 0xEE	; 238
 8e4:	a8 2e       	mov	r10, r24
 8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <vfprintf+0x2d4>
 8e8:	b8 2c       	mov	r11, r8
 8ea:	a3 2c       	mov	r10, r3
 8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <vfprintf+0x2d6>
 8ee:	b8 2c       	mov	r11, r8
 8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <vfprintf+0x2d6>
 8f2:	b9 2c       	mov	r11, r9
 8f4:	a4 fe       	sbrs	r10, 4
 8f6:	0f c0       	rjmp	.+30     	; 0x916 <vfprintf+0x2f8>
 8f8:	fe 01       	movw	r30, r28
 8fa:	e8 0d       	add	r30, r8
 8fc:	f1 1d       	adc	r31, r1
 8fe:	80 81       	ld	r24, Z
 900:	80 33       	cpi	r24, 0x30	; 48
 902:	21 f4       	brne	.+8      	; 0x90c <vfprintf+0x2ee>
 904:	9a 2d       	mov	r25, r10
 906:	99 7e       	andi	r25, 0xE9	; 233
 908:	a9 2e       	mov	r10, r25
 90a:	09 c0       	rjmp	.+18     	; 0x91e <vfprintf+0x300>
 90c:	a2 fe       	sbrs	r10, 2
 90e:	06 c0       	rjmp	.+12     	; 0x91c <vfprintf+0x2fe>
 910:	b3 94       	inc	r11
 912:	b3 94       	inc	r11
 914:	04 c0       	rjmp	.+8      	; 0x91e <vfprintf+0x300>
 916:	8a 2d       	mov	r24, r10
 918:	86 78       	andi	r24, 0x86	; 134
 91a:	09 f0       	breq	.+2      	; 0x91e <vfprintf+0x300>
 91c:	b3 94       	inc	r11
 91e:	a3 fc       	sbrc	r10, 3
 920:	11 c0       	rjmp	.+34     	; 0x944 <vfprintf+0x326>
 922:	a0 fe       	sbrs	r10, 0
 924:	06 c0       	rjmp	.+12     	; 0x932 <vfprintf+0x314>
 926:	b2 14       	cp	r11, r2
 928:	88 f4       	brcc	.+34     	; 0x94c <vfprintf+0x32e>
 92a:	28 0c       	add	r2, r8
 92c:	92 2c       	mov	r9, r2
 92e:	9b 18       	sub	r9, r11
 930:	0e c0       	rjmp	.+28     	; 0x94e <vfprintf+0x330>
 932:	b2 14       	cp	r11, r2
 934:	60 f4       	brcc	.+24     	; 0x94e <vfprintf+0x330>
 936:	b6 01       	movw	r22, r12
 938:	80 e2       	ldi	r24, 0x20	; 32
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	0e 94 06 05 	call	0xa0c	; 0xa0c <fputc>
 940:	b3 94       	inc	r11
 942:	f7 cf       	rjmp	.-18     	; 0x932 <vfprintf+0x314>
 944:	b2 14       	cp	r11, r2
 946:	18 f4       	brcc	.+6      	; 0x94e <vfprintf+0x330>
 948:	2b 18       	sub	r2, r11
 94a:	02 c0       	rjmp	.+4      	; 0x950 <vfprintf+0x332>
 94c:	98 2c       	mov	r9, r8
 94e:	21 2c       	mov	r2, r1
 950:	a4 fe       	sbrs	r10, 4
 952:	10 c0       	rjmp	.+32     	; 0x974 <vfprintf+0x356>
 954:	b6 01       	movw	r22, r12
 956:	80 e3       	ldi	r24, 0x30	; 48
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	0e 94 06 05 	call	0xa0c	; 0xa0c <fputc>
 95e:	a2 fe       	sbrs	r10, 2
 960:	17 c0       	rjmp	.+46     	; 0x990 <vfprintf+0x372>
 962:	a1 fc       	sbrc	r10, 1
 964:	03 c0       	rjmp	.+6      	; 0x96c <vfprintf+0x34e>
 966:	88 e7       	ldi	r24, 0x78	; 120
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	02 c0       	rjmp	.+4      	; 0x970 <vfprintf+0x352>
 96c:	88 e5       	ldi	r24, 0x58	; 88
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	b6 01       	movw	r22, r12
 972:	0c c0       	rjmp	.+24     	; 0x98c <vfprintf+0x36e>
 974:	8a 2d       	mov	r24, r10
 976:	86 78       	andi	r24, 0x86	; 134
 978:	59 f0       	breq	.+22     	; 0x990 <vfprintf+0x372>
 97a:	a1 fe       	sbrs	r10, 1
 97c:	02 c0       	rjmp	.+4      	; 0x982 <vfprintf+0x364>
 97e:	8b e2       	ldi	r24, 0x2B	; 43
 980:	01 c0       	rjmp	.+2      	; 0x984 <vfprintf+0x366>
 982:	80 e2       	ldi	r24, 0x20	; 32
 984:	a7 fc       	sbrc	r10, 7
 986:	8d e2       	ldi	r24, 0x2D	; 45
 988:	b6 01       	movw	r22, r12
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	0e 94 06 05 	call	0xa0c	; 0xa0c <fputc>
 990:	89 14       	cp	r8, r9
 992:	38 f4       	brcc	.+14     	; 0x9a2 <vfprintf+0x384>
 994:	b6 01       	movw	r22, r12
 996:	80 e3       	ldi	r24, 0x30	; 48
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	0e 94 06 05 	call	0xa0c	; 0xa0c <fputc>
 99e:	9a 94       	dec	r9
 9a0:	f7 cf       	rjmp	.-18     	; 0x990 <vfprintf+0x372>
 9a2:	8a 94       	dec	r8
 9a4:	f3 01       	movw	r30, r6
 9a6:	e8 0d       	add	r30, r8
 9a8:	f1 1d       	adc	r31, r1
 9aa:	80 81       	ld	r24, Z
 9ac:	b6 01       	movw	r22, r12
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 06 05 	call	0xa0c	; 0xa0c <fputc>
 9b4:	81 10       	cpse	r8, r1
 9b6:	f5 cf       	rjmp	.-22     	; 0x9a2 <vfprintf+0x384>
 9b8:	22 20       	and	r2, r2
 9ba:	09 f4       	brne	.+2      	; 0x9be <vfprintf+0x3a0>
 9bc:	42 ce       	rjmp	.-892    	; 0x642 <vfprintf+0x24>
 9be:	b6 01       	movw	r22, r12
 9c0:	80 e2       	ldi	r24, 0x20	; 32
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	0e 94 06 05 	call	0xa0c	; 0xa0c <fputc>
 9c8:	2a 94       	dec	r2
 9ca:	f6 cf       	rjmp	.-20     	; 0x9b8 <vfprintf+0x39a>
 9cc:	f6 01       	movw	r30, r12
 9ce:	86 81       	ldd	r24, Z+6	; 0x06
 9d0:	97 81       	ldd	r25, Z+7	; 0x07
 9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <vfprintf+0x3ba>
 9d4:	8f ef       	ldi	r24, 0xFF	; 255
 9d6:	9f ef       	ldi	r25, 0xFF	; 255
 9d8:	2b 96       	adiw	r28, 0x0b	; 11
 9da:	e2 e1       	ldi	r30, 0x12	; 18
 9dc:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__epilogue_restores__>

000009e0 <strnlen_P>:
 9e0:	fc 01       	movw	r30, r24
 9e2:	05 90       	lpm	r0, Z+
 9e4:	61 50       	subi	r22, 0x01	; 1
 9e6:	70 40       	sbci	r23, 0x00	; 0
 9e8:	01 10       	cpse	r0, r1
 9ea:	d8 f7       	brcc	.-10     	; 0x9e2 <strnlen_P+0x2>
 9ec:	80 95       	com	r24
 9ee:	90 95       	com	r25
 9f0:	8e 0f       	add	r24, r30
 9f2:	9f 1f       	adc	r25, r31
 9f4:	08 95       	ret

000009f6 <strnlen>:
 9f6:	fc 01       	movw	r30, r24
 9f8:	61 50       	subi	r22, 0x01	; 1
 9fa:	70 40       	sbci	r23, 0x00	; 0
 9fc:	01 90       	ld	r0, Z+
 9fe:	01 10       	cpse	r0, r1
 a00:	d8 f7       	brcc	.-10     	; 0x9f8 <strnlen+0x2>
 a02:	80 95       	com	r24
 a04:	90 95       	com	r25
 a06:	8e 0f       	add	r24, r30
 a08:	9f 1f       	adc	r25, r31
 a0a:	08 95       	ret

00000a0c <fputc>:
 a0c:	0f 93       	push	r16
 a0e:	1f 93       	push	r17
 a10:	cf 93       	push	r28
 a12:	df 93       	push	r29
 a14:	fb 01       	movw	r30, r22
 a16:	23 81       	ldd	r18, Z+3	; 0x03
 a18:	21 fd       	sbrc	r18, 1
 a1a:	03 c0       	rjmp	.+6      	; 0xa22 <fputc+0x16>
 a1c:	8f ef       	ldi	r24, 0xFF	; 255
 a1e:	9f ef       	ldi	r25, 0xFF	; 255
 a20:	2c c0       	rjmp	.+88     	; 0xa7a <fputc+0x6e>
 a22:	22 ff       	sbrs	r18, 2
 a24:	16 c0       	rjmp	.+44     	; 0xa52 <fputc+0x46>
 a26:	46 81       	ldd	r20, Z+6	; 0x06
 a28:	57 81       	ldd	r21, Z+7	; 0x07
 a2a:	24 81       	ldd	r18, Z+4	; 0x04
 a2c:	35 81       	ldd	r19, Z+5	; 0x05
 a2e:	42 17       	cp	r20, r18
 a30:	53 07       	cpc	r21, r19
 a32:	44 f4       	brge	.+16     	; 0xa44 <fputc+0x38>
 a34:	a0 81       	ld	r26, Z
 a36:	b1 81       	ldd	r27, Z+1	; 0x01
 a38:	9d 01       	movw	r18, r26
 a3a:	2f 5f       	subi	r18, 0xFF	; 255
 a3c:	3f 4f       	sbci	r19, 0xFF	; 255
 a3e:	31 83       	std	Z+1, r19	; 0x01
 a40:	20 83       	st	Z, r18
 a42:	8c 93       	st	X, r24
 a44:	26 81       	ldd	r18, Z+6	; 0x06
 a46:	37 81       	ldd	r19, Z+7	; 0x07
 a48:	2f 5f       	subi	r18, 0xFF	; 255
 a4a:	3f 4f       	sbci	r19, 0xFF	; 255
 a4c:	37 83       	std	Z+7, r19	; 0x07
 a4e:	26 83       	std	Z+6, r18	; 0x06
 a50:	14 c0       	rjmp	.+40     	; 0xa7a <fputc+0x6e>
 a52:	8b 01       	movw	r16, r22
 a54:	ec 01       	movw	r28, r24
 a56:	fb 01       	movw	r30, r22
 a58:	00 84       	ldd	r0, Z+8	; 0x08
 a5a:	f1 85       	ldd	r31, Z+9	; 0x09
 a5c:	e0 2d       	mov	r30, r0
 a5e:	09 95       	icall
 a60:	89 2b       	or	r24, r25
 a62:	e1 f6       	brne	.-72     	; 0xa1c <fputc+0x10>
 a64:	d8 01       	movw	r26, r16
 a66:	16 96       	adiw	r26, 0x06	; 6
 a68:	8d 91       	ld	r24, X+
 a6a:	9c 91       	ld	r25, X
 a6c:	17 97       	sbiw	r26, 0x07	; 7
 a6e:	01 96       	adiw	r24, 0x01	; 1
 a70:	17 96       	adiw	r26, 0x07	; 7
 a72:	9c 93       	st	X, r25
 a74:	8e 93       	st	-X, r24
 a76:	16 97       	sbiw	r26, 0x06	; 6
 a78:	ce 01       	movw	r24, r28
 a7a:	df 91       	pop	r29
 a7c:	cf 91       	pop	r28
 a7e:	1f 91       	pop	r17
 a80:	0f 91       	pop	r16
 a82:	08 95       	ret

00000a84 <__ultoa_invert>:
 a84:	fa 01       	movw	r30, r20
 a86:	aa 27       	eor	r26, r26
 a88:	28 30       	cpi	r18, 0x08	; 8
 a8a:	51 f1       	breq	.+84     	; 0xae0 <__ultoa_invert+0x5c>
 a8c:	20 31       	cpi	r18, 0x10	; 16
 a8e:	81 f1       	breq	.+96     	; 0xaf0 <__ultoa_invert+0x6c>
 a90:	e8 94       	clt
 a92:	6f 93       	push	r22
 a94:	6e 7f       	andi	r22, 0xFE	; 254
 a96:	6e 5f       	subi	r22, 0xFE	; 254
 a98:	7f 4f       	sbci	r23, 0xFF	; 255
 a9a:	8f 4f       	sbci	r24, 0xFF	; 255
 a9c:	9f 4f       	sbci	r25, 0xFF	; 255
 a9e:	af 4f       	sbci	r26, 0xFF	; 255
 aa0:	b1 e0       	ldi	r27, 0x01	; 1
 aa2:	3e d0       	rcall	.+124    	; 0xb20 <__ultoa_invert+0x9c>
 aa4:	b4 e0       	ldi	r27, 0x04	; 4
 aa6:	3c d0       	rcall	.+120    	; 0xb20 <__ultoa_invert+0x9c>
 aa8:	67 0f       	add	r22, r23
 aaa:	78 1f       	adc	r23, r24
 aac:	89 1f       	adc	r24, r25
 aae:	9a 1f       	adc	r25, r26
 ab0:	a1 1d       	adc	r26, r1
 ab2:	68 0f       	add	r22, r24
 ab4:	79 1f       	adc	r23, r25
 ab6:	8a 1f       	adc	r24, r26
 ab8:	91 1d       	adc	r25, r1
 aba:	a1 1d       	adc	r26, r1
 abc:	6a 0f       	add	r22, r26
 abe:	71 1d       	adc	r23, r1
 ac0:	81 1d       	adc	r24, r1
 ac2:	91 1d       	adc	r25, r1
 ac4:	a1 1d       	adc	r26, r1
 ac6:	20 d0       	rcall	.+64     	; 0xb08 <__ultoa_invert+0x84>
 ac8:	09 f4       	brne	.+2      	; 0xacc <__ultoa_invert+0x48>
 aca:	68 94       	set
 acc:	3f 91       	pop	r19
 ace:	2a e0       	ldi	r18, 0x0A	; 10
 ad0:	26 9f       	mul	r18, r22
 ad2:	11 24       	eor	r1, r1
 ad4:	30 19       	sub	r19, r0
 ad6:	30 5d       	subi	r19, 0xD0	; 208
 ad8:	31 93       	st	Z+, r19
 ada:	de f6       	brtc	.-74     	; 0xa92 <__ultoa_invert+0xe>
 adc:	cf 01       	movw	r24, r30
 ade:	08 95       	ret
 ae0:	46 2f       	mov	r20, r22
 ae2:	47 70       	andi	r20, 0x07	; 7
 ae4:	40 5d       	subi	r20, 0xD0	; 208
 ae6:	41 93       	st	Z+, r20
 ae8:	b3 e0       	ldi	r27, 0x03	; 3
 aea:	0f d0       	rcall	.+30     	; 0xb0a <__ultoa_invert+0x86>
 aec:	c9 f7       	brne	.-14     	; 0xae0 <__ultoa_invert+0x5c>
 aee:	f6 cf       	rjmp	.-20     	; 0xadc <__ultoa_invert+0x58>
 af0:	46 2f       	mov	r20, r22
 af2:	4f 70       	andi	r20, 0x0F	; 15
 af4:	40 5d       	subi	r20, 0xD0	; 208
 af6:	4a 33       	cpi	r20, 0x3A	; 58
 af8:	18 f0       	brcs	.+6      	; 0xb00 <__ultoa_invert+0x7c>
 afa:	49 5d       	subi	r20, 0xD9	; 217
 afc:	31 fd       	sbrc	r19, 1
 afe:	40 52       	subi	r20, 0x20	; 32
 b00:	41 93       	st	Z+, r20
 b02:	02 d0       	rcall	.+4      	; 0xb08 <__ultoa_invert+0x84>
 b04:	a9 f7       	brne	.-22     	; 0xaf0 <__ultoa_invert+0x6c>
 b06:	ea cf       	rjmp	.-44     	; 0xadc <__ultoa_invert+0x58>
 b08:	b4 e0       	ldi	r27, 0x04	; 4
 b0a:	a6 95       	lsr	r26
 b0c:	97 95       	ror	r25
 b0e:	87 95       	ror	r24
 b10:	77 95       	ror	r23
 b12:	67 95       	ror	r22
 b14:	ba 95       	dec	r27
 b16:	c9 f7       	brne	.-14     	; 0xb0a <__ultoa_invert+0x86>
 b18:	00 97       	sbiw	r24, 0x00	; 0
 b1a:	61 05       	cpc	r22, r1
 b1c:	71 05       	cpc	r23, r1
 b1e:	08 95       	ret
 b20:	9b 01       	movw	r18, r22
 b22:	ac 01       	movw	r20, r24
 b24:	0a 2e       	mov	r0, r26
 b26:	06 94       	lsr	r0
 b28:	57 95       	ror	r21
 b2a:	47 95       	ror	r20
 b2c:	37 95       	ror	r19
 b2e:	27 95       	ror	r18
 b30:	ba 95       	dec	r27
 b32:	c9 f7       	brne	.-14     	; 0xb26 <__ultoa_invert+0xa2>
 b34:	62 0f       	add	r22, r18
 b36:	73 1f       	adc	r23, r19
 b38:	84 1f       	adc	r24, r20
 b3a:	95 1f       	adc	r25, r21
 b3c:	a0 1d       	adc	r26, r0
 b3e:	08 95       	ret

00000b40 <__prologue_saves__>:
 b40:	2f 92       	push	r2
 b42:	3f 92       	push	r3
 b44:	4f 92       	push	r4
 b46:	5f 92       	push	r5
 b48:	6f 92       	push	r6
 b4a:	7f 92       	push	r7
 b4c:	8f 92       	push	r8
 b4e:	9f 92       	push	r9
 b50:	af 92       	push	r10
 b52:	bf 92       	push	r11
 b54:	cf 92       	push	r12
 b56:	df 92       	push	r13
 b58:	ef 92       	push	r14
 b5a:	ff 92       	push	r15
 b5c:	0f 93       	push	r16
 b5e:	1f 93       	push	r17
 b60:	cf 93       	push	r28
 b62:	df 93       	push	r29
 b64:	cd b7       	in	r28, 0x3d	; 61
 b66:	de b7       	in	r29, 0x3e	; 62
 b68:	ca 1b       	sub	r28, r26
 b6a:	db 0b       	sbc	r29, r27
 b6c:	0f b6       	in	r0, 0x3f	; 63
 b6e:	f8 94       	cli
 b70:	de bf       	out	0x3e, r29	; 62
 b72:	0f be       	out	0x3f, r0	; 63
 b74:	cd bf       	out	0x3d, r28	; 61
 b76:	09 94       	ijmp

00000b78 <__epilogue_restores__>:
 b78:	2a 88       	ldd	r2, Y+18	; 0x12
 b7a:	39 88       	ldd	r3, Y+17	; 0x11
 b7c:	48 88       	ldd	r4, Y+16	; 0x10
 b7e:	5f 84       	ldd	r5, Y+15	; 0x0f
 b80:	6e 84       	ldd	r6, Y+14	; 0x0e
 b82:	7d 84       	ldd	r7, Y+13	; 0x0d
 b84:	8c 84       	ldd	r8, Y+12	; 0x0c
 b86:	9b 84       	ldd	r9, Y+11	; 0x0b
 b88:	aa 84       	ldd	r10, Y+10	; 0x0a
 b8a:	b9 84       	ldd	r11, Y+9	; 0x09
 b8c:	c8 84       	ldd	r12, Y+8	; 0x08
 b8e:	df 80       	ldd	r13, Y+7	; 0x07
 b90:	ee 80       	ldd	r14, Y+6	; 0x06
 b92:	fd 80       	ldd	r15, Y+5	; 0x05
 b94:	0c 81       	ldd	r16, Y+4	; 0x04
 b96:	1b 81       	ldd	r17, Y+3	; 0x03
 b98:	aa 81       	ldd	r26, Y+2	; 0x02
 b9a:	b9 81       	ldd	r27, Y+1	; 0x01
 b9c:	ce 0f       	add	r28, r30
 b9e:	d1 1d       	adc	r29, r1
 ba0:	0f b6       	in	r0, 0x3f	; 63
 ba2:	f8 94       	cli
 ba4:	de bf       	out	0x3e, r29	; 62
 ba6:	0f be       	out	0x3f, r0	; 63
 ba8:	cd bf       	out	0x3d, r28	; 61
 baa:	ed 01       	movw	r28, r26
 bac:	08 95       	ret

00000bae <_exit>:
 bae:	f8 94       	cli

00000bb0 <__stop_program>:
 bb0:	ff cf       	rjmp	.-2      	; 0xbb0 <__stop_program>
