
Alarm_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  0000036e  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000a6  008000a6  00000448  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001297  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fc  00000000  00000000  00001893  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a44  00000000  00000000  0000228f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00002cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000572  00000000  00000000  00002ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064f  00000000  00000000  00003452  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003aa1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3a       	cpi	r26, 0xA9	; 169
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 aa 01 	call	0x354	; 0x354 <main>
  8a:	0c 94 b5 01 	jmp	0x36a	; 0x36a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_init>:
#include <avr/io.h>
#include <util/delay.h>
#include "I2C.h"

void I2C_init(){
	TWBR = 0x40;
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	80 b9       	out	0x00, r24	; 0
  96:	08 95       	ret

00000098 <LCD_Send_Half_Byte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	90 e1       	ldi	r25, 0x10	; 16
  9a:	9a 95       	dec	r25
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_Send_Half_Byte+0x2>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_Send_Half_Byte+0x8>
	LCD_Send_Byte(0x6, 0); 
	_delay_ms(1);
}
void LCD_Send_Half_Byte(uint8_t half_byte) {
	_delay_us(50);
	half_byte = (half_byte << 2) & 0x3C;
  a0:	88 0f       	add	r24, r24
  a2:	88 0f       	add	r24, r24
	Enable_1;
  a4:	ae 9a       	sbi	0x15, 6	; 21
	PORTC &= 0xC3;
  a6:	95 b3       	in	r25, 0x15	; 21
  a8:	93 7c       	andi	r25, 0xC3	; 195
  aa:	95 bb       	out	0x15, r25	; 21
	PORTC |= half_byte;
  ac:	95 b3       	in	r25, 0x15	; 21
  ae:	8c 73       	andi	r24, 0x3C	; 60
  b0:	89 2b       	or	r24, r25
  b2:	85 bb       	out	0x15, r24	; 21
	Enable_0;
  b4:	ae 98       	cbi	0x15, 6	; 21
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	8a 95       	dec	r24
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_Send_Half_Byte+0x20>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_Send_Half_Byte+0x26>
  be:	08 95       	ret

000000c0 <LCD_Send_Byte>:
	_delay_us(50);
}

void LCD_Send_Byte(uint8_t byte, uint8_t mode) {
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
	if (mode == 0) RS_0;
  c4:	61 11       	cpse	r22, r1
  c6:	02 c0       	rjmp	.+4      	; 0xcc <LCD_Send_Byte+0xc>
  c8:	af 98       	cbi	0x15, 7	; 21
  ca:	01 c0       	rjmp	.+2      	; 0xce <LCD_Send_Byte+0xe>
	else RS_1;
  cc:	af 9a       	sbi	0x15, 7	; 21

	uint8_t half_byte_high = (byte >> 4) & 0x0F;
	uint8_t half_byte_low = byte & 0x0F;
	LCD_Send_Half_Byte(half_byte_high);
  ce:	8c 2f       	mov	r24, r28
  d0:	82 95       	swap	r24
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
	LCD_Send_Half_Byte(half_byte_low);
  d8:	8c 2f       	mov	r24, r28
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
}
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	85 ea       	ldi	r24, 0xA5	; 165
  e6:	9e e0       	ldi	r25, 0x0E	; 14
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_Init+0x4>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_Init+0xa>
  ee:	00 00       	nop
#include "LCD.h"

void LCD_Init(){
	_delay_ms(15);
	LCD_Send_Half_Byte(0x3);
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
  f6:	87 ee       	ldi	r24, 0xE7	; 231
  f8:	93 e0       	ldi	r25, 0x03	; 3
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Init+0x16>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_Init+0x1c>
 100:	00 00       	nop
	_delay_ms(4);
	LCD_Send_Half_Byte(0x3);
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
 108:	87 ea       	ldi	r24, 0xA7	; 167
 10a:	91 e6       	ldi	r25, 0x61	; 97
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_Init+0x28>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_Init+0x2e>
 112:	00 00       	nop
	_delay_ms(100);
	LCD_Send_Half_Byte(0x3);
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
 11a:	89 ef       	ldi	r24, 0xF9	; 249
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_Init+0x3a>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_Init+0x40>
 124:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Half_Byte(0x2);
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_Half_Byte>
 12c:	89 ef       	ldi	r24, 0xF9	; 249
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_Init+0x4c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_Init+0x52>
 136:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Byte(0x28, 0);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	88 e2       	ldi	r24, 0x28	; 40
 13c:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_Init+0x60>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_Init+0x66>
 14a:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Byte(0xC, 0); 
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	8c e0       	ldi	r24, 0x0C	; 12
 150:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
 154:	89 ef       	ldi	r24, 0xF9	; 249
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_Init+0x74>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_Init+0x7a>
 15e:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Byte(0x6, 0); 
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
 168:	89 ef       	ldi	r24, 0xF9	; 249
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Init+0x88>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Init+0x8e>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <LCD_Send_Char>:
	LCD_Send_Half_Byte(half_byte_high);
	LCD_Send_Half_Byte(half_byte_low);
}

void LCD_Send_Char(uint8_t byte){
	LCD_Send_Byte(byte, 1);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
 17c:	08 95       	ret

0000017e <LCD_Set_Cursor>:
}
void LCD_Set_Cursor(uint8_t horizontal, uint8_t vertical){
	uint8_t position = 0;
	position = (0x40 * vertical + horizontal)|0x80;
	LCD_Send_Byte(position, 0);
 17e:	90 e4       	ldi	r25, 0x40	; 64
 180:	69 9f       	mul	r22, r25
 182:	80 0d       	add	r24, r0
 184:	11 24       	eor	r1, r1
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
 18e:	08 95       	ret

00000190 <LCD_Clear>:
}
void LCD_Clear(){
	LCD_Send_Byte(0x1, 0);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Send_Byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	86 e7       	ldi	r24, 0x76	; 118
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Clear+0xc>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_Clear+0x12>
 1a2:	00 00       	nop
 1a4:	08 95       	ret

000001a6 <LCD_String>:
	_delay_us(1500);
}

void LCD_String(char* message){
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ec 01       	movw	r28, r24
	for(int i = 0; message[i] != '\0'; i++){
 1ac:	88 81       	ld	r24, Y
 1ae:	88 23       	and	r24, r24
 1b0:	31 f0       	breq	.+12     	; 0x1be <LCD_String+0x18>
 1b2:	21 96       	adiw	r28, 0x01	; 1
		LCD_Send_Char(message[i]);
 1b4:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_Send_Char>
	LCD_Send_Byte(0x1, 0);
	_delay_us(1500);
}

void LCD_String(char* message){
	for(int i = 0; message[i] != '\0'; i++){
 1b8:	89 91       	ld	r24, Y+
 1ba:	81 11       	cpse	r24, r1
 1bc:	fb cf       	rjmp	.-10     	; 0x1b4 <LCD_String+0xe>
		LCD_Send_Char(message[i]);
	}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <GPIO_Init>:
	UART_init(51);
}

void GPIO_Init(){
	//Configuring Led
	DDRD  |=   (1 << Led_Blue)|(1 << Led_Red);
 1c4:	81 b3       	in	r24, 0x11	; 17
 1c6:	80 66       	ori	r24, 0x60	; 96
 1c8:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~((1 << Led_Blue)|(1 << Led_Red));
 1ca:	82 b3       	in	r24, 0x12	; 18
 1cc:	8f 79       	andi	r24, 0x9F	; 159
 1ce:	82 bb       	out	0x12, r24	; 18
	//Configuring Buttons
	DDRB  &= ~((1 << Button_Ok)|(1 << Button_Set));
 1d0:	87 b3       	in	r24, 0x17	; 23
 1d2:	8c 7f       	andi	r24, 0xFC	; 252
 1d4:	87 bb       	out	0x17, r24	; 23
	PORTB |=  (1 << Button_Ok)|(1 << Button_Set);
 1d6:	88 b3       	in	r24, 0x18	; 24
 1d8:	83 60       	ori	r24, 0x03	; 3
 1da:	88 bb       	out	0x18, r24	; 24
	//Configuring Buzzer
	DDRA  |=  (1 << Buzzer);
 1dc:	d0 9a       	sbi	0x1a, 0	; 26
	PORTA &= ~(1 << Buzzer);
 1de:	d8 98       	cbi	0x1b, 0	; 27
	//Configuring LCD pins
	DDRC  =  255;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	84 bb       	out	0x14, r24	; 20
	PORTC =  0;
 1e4:	15 ba       	out	0x15, r1	; 21
 1e6:	08 95       	ret

000001e8 <MCU_Init>:
#include "MCU_Init.h"
#include "Timer.h"
#include "LCD.h"

void MCU_Init(){
	Timer_Init();
 1e8:	0e 94 1b 01 	call	0x236	; 0x236 <Timer_Init>
	GPIO_Init();
 1ec:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <GPIO_Init>
	LCD_Init();
 1f0:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_Init>
	I2C_init();
 1f4:	0e 94 49 00 	call	0x92	; 0x92 <I2C_init>
	UART_init(51);
 1f8:	83 e3       	ldi	r24, 0x33	; 51
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 28 01 	call	0x250	; 0x250 <UART_init>
 200:	08 95       	ret

00000202 <__vector_6>:
#include "Timer.h"
volatile uint8_t timer_flag = 0;
ISR(TIMER1_COMPA_vect){
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
	if(timer_flag == 0)
 20e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 212:	81 11       	cpse	r24, r1
 214:	04 c0       	rjmp	.+8      	; 0x21e <__vector_6+0x1c>
		timer_flag = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
 21c:	06 c0       	rjmp	.+12     	; 0x22a <__vector_6+0x28>
	else if(timer_flag == 1)
 21e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	11 f4       	brne	.+4      	; 0x22a <__vector_6+0x28>
		timer_flag = 0;
 226:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
}
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <Timer_Init>:

void Timer_Init(){
	TCCR1B |= (1 << WGM12);
 236:	8e b5       	in	r24, 0x2e	; 46
 238:	88 60       	ori	r24, 0x08	; 8
 23a:	8e bd       	out	0x2e, r24	; 46
	TIMSK  |= (1 << OCIE1A);
 23c:	89 b7       	in	r24, 0x39	; 57
 23e:	80 61       	ori	r24, 0x10	; 16
 240:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0x00;
 242:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0xFF;
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << CS12);
 248:	8e b5       	in	r24, 0x2e	; 46
 24a:	84 60       	ori	r24, 0x04	; 4
 24c:	8e bd       	out	0x2e, r24	; 46
 24e:	08 95       	ret

00000250 <UART_init>:
#include "UART.h"

void UART_init(unsigned int speed){
	UBRRH = (unsigned char)(speed>>8);
 250:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)speed;
 252:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1 << RXEN)|(1 << TXEN);
 254:	88 e1       	ldi	r24, 0x18	; 24
 256:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (1 << RXCIE);
 258:	57 9a       	sbi	0x0a, 7	; 10
	UCSRC = (1 << URSEL)|(1 << USBS)|(1 << UCSZ1)|(1 << UCSZ0);
 25a:	8e e8       	ldi	r24, 0x8E	; 142
 25c:	80 bd       	out	0x20, r24	; 32
 25e:	08 95       	ret

00000260 <Display_Time>:
void Display_Time(){
	
	LCD_Set_Cursor(0, 0);
	LCD_String("Time:     Alarm:");
}
void Enter_Set_Time_Mode(){
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
 268:	80 e6       	ldi	r24, 0x60	; 96
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 270:	08 95       	ret

00000272 <Clock_Alarm>:
	
}
void Clock_Alarm(){
	
	if (Current_Mode == MODE_NORMAL) {
 272:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <Current_Mode>
 276:	81 11       	cpse	r24, r1
 278:	02 c0       	rjmp	.+4      	; 0x27e <Clock_Alarm+0xc>
		
		Display_Time();
 27a:	0e 94 30 01 	call	0x260	; 0x260 <Display_Time>
	}
	if(!(PINB & (1 << Button_Ok))){
 27e:	b0 99       	sbic	0x16, 0	; 22
 280:	53 c0       	rjmp	.+166    	; 0x328 <Clock_Alarm+0xb6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	83 e2       	ldi	r24, 0x23	; 35
 284:	94 ef       	ldi	r25, 0xF4	; 244
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <Clock_Alarm+0x14>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <Clock_Alarm+0x1a>
 28c:	00 00       	nop
		_delay_ms(250);
		switch(Current_Mode){
 28e:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <Current_Mode>
 292:	88 23       	and	r24, r24
 294:	19 f0       	breq	.+6      	; 0x29c <Clock_Alarm+0x2a>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	c9 f0       	breq	.+50     	; 0x2cc <Clock_Alarm+0x5a>
 29a:	46 c0       	rjmp	.+140    	; 0x328 <Clock_Alarm+0xb6>
			case MODE_NORMAL:
				Current_Mode = MODE_MENU;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Current_Mode>
				flag_set = 0;
 2a2:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <flag_set>
				LCD_Clear();
 2a6:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
				LCD_Set_Cursor(0, 0);
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
				LCD_String("* Set time");
 2b2:	81 e7       	ldi	r24, 0x71	; 113
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
				LCD_Set_Cursor(0, 1);
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
				LCD_String("  Set alarm");
 2c2:	8c e7       	ldi	r24, 0x7C	; 124
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
			break;
 2ca:	2e c0       	rjmp	.+92     	; 0x328 <Clock_Alarm+0xb6>
			
			case MODE_MENU:
				if (flag_set == 0) {
 2cc:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <flag_set>
 2d0:	81 11       	cpse	r24, r1
 2d2:	16 c0       	rjmp	.+44     	; 0x300 <Clock_Alarm+0x8e>
					LCD_Clear();
 2d4:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
					LCD_Set_Cursor(0, 0);
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
					LCD_String("  Set time");
 2e0:	88 e8       	ldi	r24, 0x88	; 136
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
					LCD_Set_Cursor(0, 1);
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
					LCD_String("* Set alarm");
 2f0:	83 e9       	ldi	r24, 0x93	; 147
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
					flag_set = 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <flag_set>
 2fe:	14 c0       	rjmp	.+40     	; 0x328 <Clock_Alarm+0xb6>
					} else {
					LCD_Clear();
 300:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
					LCD_Set_Cursor(0, 0);
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
					LCD_String("* Set time");
 30c:	81 e7       	ldi	r24, 0x71	; 113
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
					LCD_Set_Cursor(0, 1);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Set_Cursor>
					LCD_String("  Set alarm");
 31c:	8c e7       	ldi	r24, 0x7C	; 124
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
					flag_set = 0;
 324:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <flag_set>
				}
			break;
		}
	}
	if(!(PINB & (1 << Button_Set))){
 328:	b1 99       	sbic	0x16, 1	; 22
 32a:	13 c0       	rjmp	.+38     	; 0x352 <Clock_Alarm+0xe0>
 32c:	83 e2       	ldi	r24, 0x23	; 35
 32e:	94 ef       	ldi	r25, 0xF4	; 244
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <Clock_Alarm+0xbe>
 334:	00 c0       	rjmp	.+0      	; 0x336 <Clock_Alarm+0xc4>
 336:	00 00       	nop
		_delay_ms(250);
		if (flag_set == 0) {
 338:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <flag_set>
 33c:	81 11       	cpse	r24, r1
 33e:	05 c0       	rjmp	.+10     	; 0x34a <Clock_Alarm+0xd8>
			Enter_Set_Time_Mode();
			LCD_Clear();
 340:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
			Current_Mode = MODE_NORMAL;
 344:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <Current_Mode>
 348:	08 95       	ret
			} else {
			Enter_Set_Time_Mode();
			LCD_Clear();
 34a:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
			Current_Mode = MODE_NORMAL;
 34e:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <Current_Mode>
 352:	08 95       	ret

00000354 <main>:
	}
}

int main(void){
	
	MCU_Init();
 354:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCU_Init>
	//sei();
	LCD_Clear();
 358:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
	LCD_String("Alarm");
 35c:	8f e9       	ldi	r24, 0x9F	; 159
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
	while (1){
		Clock_Alarm();
 364:	0e 94 39 01 	call	0x272	; 0x272 <Clock_Alarm>
 368:	fd cf       	rjmp	.-6      	; 0x364 <main+0x10>

0000036a <_exit>:
 36a:	f8 94       	cli

0000036c <__stop_program>:
 36c:	ff cf       	rjmp	.-2      	; 0x36c <__stop_program>
