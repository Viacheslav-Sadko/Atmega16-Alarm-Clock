
Alarm_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  00000c1a  00000cae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000d6  008000d6  00000d24  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b17  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2f  00000000  00000000  00002a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3f  00000000  00000000  000035aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  000042ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000694  00000000  00000000  000045b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085b  00000000  00000000  00004c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000054a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3d       	cpi	r26, 0xD6	; 214
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ed       	ldi	r26, 0xD6	; 214
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3d       	cpi	r26, 0xDC	; 220
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 16 03 	call	0x62c	; 0x62c <main>
  8a:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Alarm_Get_Current_Value_Ptr>:
		*value_ptr = 0;
	}
}


void Save_Setting(){
  92:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <selected_parameter>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	19 f4       	brne	.+6      	; 0xa0 <Alarm_Get_Current_Value_Ptr+0xe>
  9a:	86 ed       	ldi	r24, 0xD6	; 214
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	08 95       	ret
  a0:	87 ed       	ldi	r24, 0xD7	; 215
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	08 95       	ret

000000a6 <Get_Current_Value_Ptr>:
  a6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <selected_parameter>
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	19 f4       	brne	.+6      	; 0xb4 <Get_Current_Value_Ptr+0xe>
  ae:	81 e6       	ldi	r24, 0x61	; 97
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	08 95       	ret
  b4:	82 e6       	ldi	r24, 0x62	; 98
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret

000000ba <Get_Current_Value>:
  ba:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <selected_parameter>
  be:	88 23       	and	r24, r24
  c0:	19 f0       	breq	.+6      	; 0xc8 <Get_Current_Value+0xe>
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	21 f0       	breq	.+8      	; 0xce <Get_Current_Value+0x14>
  c6:	06 c0       	rjmp	.+12     	; 0xd4 <Get_Current_Value+0x1a>
  c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hours>
  cc:	08 95       	ret
  ce:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <minutes>
  d2:	08 95       	ret
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	08 95       	ret

000000d8 <Alarm_Get_Current_Value>:
  d8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <selected_parameter>
  dc:	88 23       	and	r24, r24
  de:	19 f0       	breq	.+6      	; 0xe6 <Alarm_Get_Current_Value+0xe>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	21 f0       	breq	.+8      	; 0xec <Alarm_Get_Current_Value+0x14>
  e4:	06 c0       	rjmp	.+12     	; 0xf2 <Alarm_Get_Current_Value+0x1a>
  e6:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <alarm_hours>
  ea:	08 95       	ret
  ec:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
  f0:	08 95       	ret
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	08 95       	ret

000000f6 <Display_Current_Setting>:
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	00 d0       	rcall	.+0      	; 0x100 <Display_Current_Setting+0xa>
 100:	1f 92       	push	r1
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	88 23       	and	r24, r24
 108:	21 f0       	breq	.+8      	; 0x112 <Display_Current_Setting+0x1c>
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	09 f4       	brne	.+2      	; 0x110 <Display_Current_Setting+0x1a>
 10e:	45 c0       	rjmp	.+138    	; 0x19a <Display_Current_Setting+0xa4>
 110:	86 c0       	rjmp	.+268    	; 0x21e <Display_Current_Setting+0x128>
 112:	0e 94 5d 00 	call	0xba	; 0xba <Get_Current_Value>
 116:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 11a:	89 17       	cp	r24, r25
 11c:	09 f4       	brne	.+2      	; 0x120 <Display_Current_Setting+0x2a>
 11e:	7f c0       	rjmp	.+254    	; 0x21e <Display_Current_Setting+0x128>
 120:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 124:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_Clear>
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_Set_Cursor>
 134:	83 e6       	ldi	r24, 0x63	; 99
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
 13c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <selected_parameter>
 140:	88 23       	and	r24, r24
 142:	19 f0       	breq	.+6      	; 0x14a <Display_Current_Setting+0x54>
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	31 f0       	breq	.+12     	; 0x154 <Display_Current_Setting+0x5e>
 148:	09 c0       	rjmp	.+18     	; 0x15c <Display_Current_Setting+0x66>
 14a:	88 e6       	ldi	r24, 0x68	; 104
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
 152:	04 c0       	rjmp	.+8      	; 0x15c <Display_Current_Setting+0x66>
 154:	80 e7       	ldi	r24, 0x70	; 112
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
 15c:	0e 94 5d 00 	call	0xba	; 0xba <Get_Current_Value>
 160:	1f 92       	push	r1
 162:	8f 93       	push	r24
 164:	8a e7       	ldi	r24, 0x7A	; 122
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	9f 93       	push	r25
 16a:	8f 93       	push	r24
 16c:	8e 01       	movw	r16, r28
 16e:	0f 5f       	subi	r16, 0xFF	; 255
 170:	1f 4f       	sbci	r17, 0xFF	; 255
 172:	1f 93       	push	r17
 174:	0f 93       	push	r16
 176:	0e 94 21 03 	call	0x642	; 0x642 <sprintf>
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_Set_Cursor>
 186:	c8 01       	movw	r24, r16
 188:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	42 c0       	rjmp	.+132    	; 0x21e <Display_Current_Setting+0x128>
 19a:	0e 94 6c 00 	call	0xd8	; 0xd8 <Alarm_Get_Current_Value>
 19e:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 1a2:	89 17       	cp	r24, r25
 1a4:	e1 f1       	breq	.+120    	; 0x21e <Display_Current_Setting+0x128>
 1a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 1aa:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_Clear>
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_Set_Cursor>
 1ba:	83 e6       	ldi	r24, 0x63	; 99
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
 1c2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <selected_parameter>
 1c6:	88 23       	and	r24, r24
 1c8:	19 f0       	breq	.+6      	; 0x1d0 <Display_Current_Setting+0xda>
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	31 f0       	breq	.+12     	; 0x1da <Display_Current_Setting+0xe4>
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <Display_Current_Setting+0xec>
 1d0:	88 e6       	ldi	r24, 0x68	; 104
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <Display_Current_Setting+0xec>
 1da:	80 e7       	ldi	r24, 0x70	; 112
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
 1e2:	0e 94 6c 00 	call	0xd8	; 0xd8 <Alarm_Get_Current_Value>
 1e6:	1f 92       	push	r1
 1e8:	8f 93       	push	r24
 1ea:	8a e7       	ldi	r24, 0x7A	; 122
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	9f 93       	push	r25
 1f0:	8f 93       	push	r24
 1f2:	8e 01       	movw	r16, r28
 1f4:	0f 5f       	subi	r16, 0xFF	; 255
 1f6:	1f 4f       	sbci	r17, 0xFF	; 255
 1f8:	1f 93       	push	r17
 1fa:	0f 93       	push	r16
 1fc:	0e 94 21 03 	call	0x642	; 0x642 <sprintf>
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_Set_Cursor>
 20c:	c8 01       	movw	r24, r16
 20e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	08 95       	ret

0000022e <Display_Time>:
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_Set_Cursor>
 23a:	8f e7       	ldi	r24, 0x7F	; 127
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
 242:	08 95       	ret

00000244 <Increase_Value>:
 244:	0e 94 53 00 	call	0xa6	; 0xa6 <Get_Current_Value_Ptr>
 248:	dc 01       	movw	r26, r24
 24a:	9c 91       	ld	r25, X
 24c:	9f 5f       	subi	r25, 0xFF	; 255
 24e:	9c 93       	st	X, r25
 250:	e0 91 d8 00 	lds	r30, 0x00D8	; 0x8000d8 <selected_parameter>
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	e7 53       	subi	r30, 0x37	; 55
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	80 81       	ld	r24, Z
 25c:	89 17       	cp	r24, r25
 25e:	08 f4       	brcc	.+2      	; 0x262 <Increase_Value+0x1e>
 260:	1c 92       	st	X, r1
 262:	08 95       	ret

00000264 <Alarm_Increase_Value>:
 264:	0e 94 49 00 	call	0x92	; 0x92 <Alarm_Get_Current_Value_Ptr>
 268:	dc 01       	movw	r26, r24
 26a:	9c 91       	ld	r25, X
 26c:	9f 5f       	subi	r25, 0xFF	; 255
 26e:	9c 93       	st	X, r25
 270:	e0 91 d8 00 	lds	r30, 0x00D8	; 0x8000d8 <selected_parameter>
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	e7 53       	subi	r30, 0x37	; 55
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	80 81       	ld	r24, Z
 27c:	89 17       	cp	r24, r25
 27e:	08 f4       	brcc	.+2      	; 0x282 <Alarm_Increase_Value+0x1e>
 280:	1c 92       	st	X, r1
 282:	08 95       	ret

00000284 <Enter_Set_Time_Mode>:
	
}
void Enter_Set_Time_Mode(){
	LCD_Clear();
 284:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_Clear>
	LCD_Set_Cursor(0, 0);
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_Set_Cursor>
	LCD_String("Set time");
 294:	84 eb       	ldi	r24, 0xB4	; 180
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
	
	while(1){
		Display_Current_Setting(0);
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 7b 00 	call	0xf6	; 0xf6 <Display_Current_Setting>
		if(!(PINB & (1 << Button_Ok))){
 2a2:	b0 99       	sbic	0x16, 0	; 22
 2a4:	08 c0       	rjmp	.+16     	; 0x2b6 <Enter_Set_Time_Mode+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a6:	83 e2       	ldi	r24, 0x23	; 35
 2a8:	94 ef       	ldi	r25, 0xF4	; 244
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <Enter_Set_Time_Mode+0x26>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <Enter_Set_Time_Mode+0x2c>
 2b0:	00 00       	nop
			_delay_ms(250);
			Increase_Value();
 2b2:	0e 94 22 01 	call	0x244	; 0x244 <Increase_Value>
		}
		if(!(PINB & (1 << Button_Set))){
 2b6:	b1 99       	sbic	0x16, 1	; 22
 2b8:	f1 cf       	rjmp	.-30     	; 0x29c <Enter_Set_Time_Mode+0x18>
 2ba:	83 e2       	ldi	r24, 0x23	; 35
 2bc:	94 ef       	ldi	r25, 0xF4	; 244
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <Enter_Set_Time_Mode+0x3a>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <Enter_Set_Time_Mode+0x40>
 2c4:	00 00       	nop
			_delay_ms(250);
			selected_parameter++;
 2c6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <selected_parameter>
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
 2cc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <selected_parameter>
			if(selected_parameter > 1){
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	20 f3       	brcs	.-56     	; 0x29c <Enter_Set_Time_Mode+0x18>
				selected_parameter = 0;
 2d4:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <selected_parameter>
 2d8:	08 95       	ret

000002da <Enter_Set_Alarm_Mode>:
		
	}
}

void Enter_Set_Alarm_Mode(){
	LCD_Clear();
 2da:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_Clear>
	LCD_Set_Cursor(0, 0);
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_Set_Cursor>
	LCD_String("Set alarm:");
 2ea:	80 e9       	ldi	r24, 0x90	; 144
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
	
	while(1){
		Display_Current_Setting(1);
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 7b 00 	call	0xf6	; 0xf6 <Display_Current_Setting>
		if(!(PINB & (1 << Button_Ok))){
 2f8:	b0 99       	sbic	0x16, 0	; 22
 2fa:	08 c0       	rjmp	.+16     	; 0x30c <Enter_Set_Alarm_Mode+0x32>
 2fc:	83 e2       	ldi	r24, 0x23	; 35
 2fe:	94 ef       	ldi	r25, 0xF4	; 244
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <Enter_Set_Alarm_Mode+0x26>
 304:	00 c0       	rjmp	.+0      	; 0x306 <Enter_Set_Alarm_Mode+0x2c>
 306:	00 00       	nop
			_delay_ms(250);
			Alarm_Increase_Value();
 308:	0e 94 32 01 	call	0x264	; 0x264 <Alarm_Increase_Value>
		}
		if(!(PINB & (1 << Button_Set))){
 30c:	b1 99       	sbic	0x16, 1	; 22
 30e:	f1 cf       	rjmp	.-30     	; 0x2f2 <Enter_Set_Alarm_Mode+0x18>
 310:	83 e2       	ldi	r24, 0x23	; 35
 312:	94 ef       	ldi	r25, 0xF4	; 244
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <Enter_Set_Alarm_Mode+0x3a>
 318:	00 c0       	rjmp	.+0      	; 0x31a <Enter_Set_Alarm_Mode+0x40>
 31a:	00 00       	nop
			_delay_ms(250);
			selected_parameter++;
 31c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <selected_parameter>
 320:	8f 5f       	subi	r24, 0xFF	; 255
 322:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <selected_parameter>
			if(selected_parameter > 1){
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	20 f3       	brcs	.-56     	; 0x2f2 <Enter_Set_Alarm_Mode+0x18>
				selected_parameter = 0;
 32a:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <selected_parameter>
 32e:	08 95       	ret

00000330 <Clock_Alarm>:
	}
}

void Clock_Alarm(){
	
	if (Current_Mode == MODE_NORMAL) {
 330:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <Current_Mode>
 334:	81 11       	cpse	r24, r1
 336:	02 c0       	rjmp	.+4      	; 0x33c <Clock_Alarm+0xc>
		
		Display_Time();
 338:	0e 94 17 01 	call	0x22e	; 0x22e <Display_Time>
	}
	if(!(PINB & (1 << Button_Ok))){
 33c:	b0 99       	sbic	0x16, 0	; 22
 33e:	6f c0       	rjmp	.+222    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 340:	83 e2       	ldi	r24, 0x23	; 35
 342:	94 ef       	ldi	r25, 0xF4	; 244
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <Clock_Alarm+0x14>
 348:	00 c0       	rjmp	.+0      	; 0x34a <Clock_Alarm+0x1a>
 34a:	00 00       	nop
		_delay_ms(250);
		switch(Current_Mode){
 34c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <Current_Mode>
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	21 f1       	breq	.+72     	; 0x39c <Clock_Alarm+0x6c>
 354:	38 f0       	brcs	.+14     	; 0x364 <Clock_Alarm+0x34>
 356:	82 30       	cpi	r24, 0x02	; 2
 358:	09 f4       	brne	.+2      	; 0x35c <Clock_Alarm+0x2c>
 35a:	57 c0       	rjmp	.+174    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 35c:	83 30       	cpi	r24, 0x03	; 3
 35e:	09 f4       	brne	.+2      	; 0x362 <Clock_Alarm+0x32>
 360:	59 c0       	rjmp	.+178    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 362:	5d c0       	rjmp	.+186    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			case MODE_NORMAL:
			Current_Mode = MODE_MENU;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <Current_Mode>
			flag_set = 0;
 36a:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <flag_set>
			LCD_Clear();
 36e:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_Clear>
			LCD_Set_Cursor(0, 0);
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_Set_Cursor>
			LCD_String("* Set time");
 37e:	8b e9       	ldi	r24, 0x9B	; 155
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
			LCD_Set_Cursor(0, 1);
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_Set_Cursor>
			LCD_String("  Set alarm");
 392:	86 ea       	ldi	r24, 0xA6	; 166
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
			break;
 39a:	41 c0       	rjmp	.+130    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			
			case MODE_MENU:
			if (flag_set == 0) {
 39c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <flag_set>
 3a0:	81 11       	cpse	r24, r1
 3a2:	1a c0       	rjmp	.+52     	; 0x3d8 <Clock_Alarm+0xa8>
				LCD_Clear();
 3a4:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_Clear>
				LCD_Set_Cursor(0, 0);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_Set_Cursor>
				LCD_String("  Set time");
 3b4:	82 eb       	ldi	r24, 0xB2	; 178
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
				LCD_Set_Cursor(0, 1);
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_Set_Cursor>
				LCD_String("* Set alarm");
 3c8:	8d eb       	ldi	r24, 0xBD	; 189
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
				flag_set = 1;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <flag_set>
 3d6:	23 c0       	rjmp	.+70     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
				} else {
				LCD_Clear();
 3d8:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_Clear>
				LCD_Set_Cursor(0, 0);
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_Set_Cursor>
				LCD_String("* Set time");
 3e8:	8b e9       	ldi	r24, 0x9B	; 155
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
				LCD_Set_Cursor(0, 1);
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_Set_Cursor>
				LCD_String("  Set alarm");
 3fc:	86 ea       	ldi	r24, 0xA6	; 166
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
				flag_set = 0;
 404:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <flag_set>
 408:	0a c0       	rjmp	.+20     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			}
			break;
			case MODE_SET_TIME:
			Enter_Set_Time_Mode();
 40a:	0e 94 42 01 	call	0x284	; 0x284 <Enter_Set_Time_Mode>
			Current_Mode = MODE_NORMAL;
 40e:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <Current_Mode>
			break;
 412:	23 c0       	rjmp	.+70     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

			case MODE_SET_ALARM:
			Enter_Set_Alarm_Mode();
 414:	0e 94 6d 01 	call	0x2da	; 0x2da <Enter_Set_Alarm_Mode>
			Current_Mode = MODE_NORMAL;
 418:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <Current_Mode>
			break;
 41c:	1e c0       	rjmp	.+60     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		}
	}
	if(!(PINB & (1 << Button_Set)) && Current_Mode == MODE_MENU){
 41e:	b1 99       	sbic	0x16, 1	; 22
 420:	1d c0       	rjmp	.+58     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 422:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <Current_Mode>
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	c9 f4       	brne	.+50     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 42a:	83 e2       	ldi	r24, 0x23	; 35
 42c:	94 ef       	ldi	r25, 0xF4	; 244
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 434:	00 00       	nop
		_delay_ms(250);
		if (flag_set == 0) {
 436:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <flag_set>
 43a:	81 11       	cpse	r24, r1
 43c:	07 c0       	rjmp	.+14     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			Enter_Set_Time_Mode();
 43e:	0e 94 42 01 	call	0x284	; 0x284 <Enter_Set_Time_Mode>
			LCD_Clear();
 442:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_Clear>
			Current_Mode = MODE_NORMAL;
 446:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <Current_Mode>
 44a:	08 95       	ret
			} else {
			Enter_Set_Alarm_Mode();
 44c:	0e 94 6d 01 	call	0x2da	; 0x2da <Enter_Set_Alarm_Mode>
			LCD_Clear();
 450:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_Clear>
			Current_Mode = MODE_NORMAL;
 454:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <Current_Mode>
		}
	}
 458:	08 95       	ret
			Enter_Set_Alarm_Mode();
			Current_Mode = MODE_NORMAL;
			break;
		}
	}
	if(!(PINB & (1 << Button_Set)) && Current_Mode == MODE_MENU){
 45a:	86 b3       	in	r24, 0x16	; 22
 45c:	08 95       	ret

0000045e <I2C_init>:
#include <avr/io.h>
#include <util/delay.h>
#include "I2C.h"

void I2C_init(){
	TWBR = 0x40;
 45e:	80 e4       	ldi	r24, 0x40	; 64
 460:	80 b9       	out	0x00, r24	; 0
 462:	08 95       	ret

00000464 <LCD_Send_Half_Byte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 464:	90 e1       	ldi	r25, 0x10	; 16
 466:	9a 95       	dec	r25
 468:	f1 f7       	brne	.-4      	; 0x466 <LCD_Send_Half_Byte+0x2>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <LCD_Send_Half_Byte+0x8>
	LCD_Send_Byte(0x6, 0); 
	_delay_ms(1);
}
void LCD_Send_Half_Byte(uint8_t half_byte) {
	_delay_us(50);
	half_byte = (half_byte << 2) & 0x3C;
 46c:	88 0f       	add	r24, r24
 46e:	88 0f       	add	r24, r24
	Enable_1;
 470:	ae 9a       	sbi	0x15, 6	; 21
	PORTC &= 0xC3;
 472:	95 b3       	in	r25, 0x15	; 21
 474:	93 7c       	andi	r25, 0xC3	; 195
 476:	95 bb       	out	0x15, r25	; 21
	PORTC |= half_byte;
 478:	95 b3       	in	r25, 0x15	; 21
 47a:	8c 73       	andi	r24, 0x3C	; 60
 47c:	89 2b       	or	r24, r25
 47e:	85 bb       	out	0x15, r24	; 21
	Enable_0;
 480:	ae 98       	cbi	0x15, 6	; 21
 482:	80 e1       	ldi	r24, 0x10	; 16
 484:	8a 95       	dec	r24
 486:	f1 f7       	brne	.-4      	; 0x484 <LCD_Send_Half_Byte+0x20>
 488:	00 c0       	rjmp	.+0      	; 0x48a <LCD_Send_Half_Byte+0x26>
 48a:	08 95       	ret

0000048c <LCD_Send_Byte>:
	_delay_us(50);
}

void LCD_Send_Byte(uint8_t byte, uint8_t mode) {
 48c:	cf 93       	push	r28
 48e:	c8 2f       	mov	r28, r24
	if (mode == 0) RS_0;
 490:	61 11       	cpse	r22, r1
 492:	02 c0       	rjmp	.+4      	; 0x498 <LCD_Send_Byte+0xc>
 494:	af 98       	cbi	0x15, 7	; 21
 496:	01 c0       	rjmp	.+2      	; 0x49a <LCD_Send_Byte+0xe>
	else RS_1;
 498:	af 9a       	sbi	0x15, 7	; 21

	uint8_t half_byte_high = (byte >> 4) & 0x0F;
	uint8_t half_byte_low = byte & 0x0F;
	LCD_Send_Half_Byte(half_byte_high);
 49a:	8c 2f       	mov	r24, r28
 49c:	82 95       	swap	r24
 49e:	8f 70       	andi	r24, 0x0F	; 15
 4a0:	0e 94 32 02 	call	0x464	; 0x464 <LCD_Send_Half_Byte>
	LCD_Send_Half_Byte(half_byte_low);
 4a4:	8c 2f       	mov	r24, r28
 4a6:	8f 70       	andi	r24, 0x0F	; 15
 4a8:	0e 94 32 02 	call	0x464	; 0x464 <LCD_Send_Half_Byte>
}
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b0:	85 ea       	ldi	r24, 0xA5	; 165
 4b2:	9e e0       	ldi	r25, 0x0E	; 14
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LCD_Init+0x4>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LCD_Init+0xa>
 4ba:	00 00       	nop
#include "LCD.h"

void LCD_Init(){
	_delay_ms(15);
	LCD_Send_Half_Byte(0x3);
 4bc:	83 e0       	ldi	r24, 0x03	; 3
 4be:	0e 94 32 02 	call	0x464	; 0x464 <LCD_Send_Half_Byte>
 4c2:	87 ee       	ldi	r24, 0xE7	; 231
 4c4:	93 e0       	ldi	r25, 0x03	; 3
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <LCD_Init+0x16>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <LCD_Init+0x1c>
 4cc:	00 00       	nop
	_delay_ms(4);
	LCD_Send_Half_Byte(0x3);
 4ce:	83 e0       	ldi	r24, 0x03	; 3
 4d0:	0e 94 32 02 	call	0x464	; 0x464 <LCD_Send_Half_Byte>
 4d4:	87 ea       	ldi	r24, 0xA7	; 167
 4d6:	91 e6       	ldi	r25, 0x61	; 97
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <LCD_Init+0x28>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <LCD_Init+0x2e>
 4de:	00 00       	nop
	_delay_ms(100);
	LCD_Send_Half_Byte(0x3);
 4e0:	83 e0       	ldi	r24, 0x03	; 3
 4e2:	0e 94 32 02 	call	0x464	; 0x464 <LCD_Send_Half_Byte>
 4e6:	89 ef       	ldi	r24, 0xF9	; 249
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_Init+0x3a>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_Init+0x40>
 4f0:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Half_Byte(0x2);
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	0e 94 32 02 	call	0x464	; 0x464 <LCD_Send_Half_Byte>
 4f8:	89 ef       	ldi	r24, 0xF9	; 249
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <LCD_Init+0x4c>
 500:	00 c0       	rjmp	.+0      	; 0x502 <LCD_Init+0x52>
 502:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Byte(0x28, 0);
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	88 e2       	ldi	r24, 0x28	; 40
 508:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Send_Byte>
 50c:	89 ef       	ldi	r24, 0xF9	; 249
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	f1 f7       	brne	.-4      	; 0x510 <LCD_Init+0x60>
 514:	00 c0       	rjmp	.+0      	; 0x516 <LCD_Init+0x66>
 516:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Byte(0xC, 0); 
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	8c e0       	ldi	r24, 0x0C	; 12
 51c:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Send_Byte>
 520:	89 ef       	ldi	r24, 0xF9	; 249
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <LCD_Init+0x74>
 528:	00 c0       	rjmp	.+0      	; 0x52a <LCD_Init+0x7a>
 52a:	00 00       	nop
	_delay_ms(1);
	LCD_Send_Byte(0x6, 0); 
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	86 e0       	ldi	r24, 0x06	; 6
 530:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Send_Byte>
 534:	89 ef       	ldi	r24, 0xF9	; 249
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	f1 f7       	brne	.-4      	; 0x538 <LCD_Init+0x88>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <LCD_Init+0x8e>
 53e:	00 00       	nop
 540:	08 95       	ret

00000542 <LCD_Send_Char>:
	LCD_Send_Half_Byte(half_byte_high);
	LCD_Send_Half_Byte(half_byte_low);
}

void LCD_Send_Char(uint8_t byte){
	LCD_Send_Byte(byte, 1);
 542:	61 e0       	ldi	r22, 0x01	; 1
 544:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Send_Byte>
 548:	08 95       	ret

0000054a <LCD_Set_Cursor>:
}
void LCD_Set_Cursor(uint8_t horizontal, uint8_t vertical){
	uint8_t position = 0;
	position = (0x40 * vertical + horizontal)|0x80;
	LCD_Send_Byte(position, 0);
 54a:	90 e4       	ldi	r25, 0x40	; 64
 54c:	69 9f       	mul	r22, r25
 54e:	80 0d       	add	r24, r0
 550:	11 24       	eor	r1, r1
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	80 68       	ori	r24, 0x80	; 128
 556:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Send_Byte>
 55a:	08 95       	ret

0000055c <LCD_Clear>:
}
void LCD_Clear(){
	LCD_Send_Byte(0x1, 0);
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Send_Byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 564:	86 e7       	ldi	r24, 0x76	; 118
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	f1 f7       	brne	.-4      	; 0x568 <LCD_Clear+0xc>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <LCD_Clear+0x12>
 56e:	00 00       	nop
 570:	08 95       	ret

00000572 <LCD_String>:
	_delay_us(1500);
}

void LCD_String(char* message){
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	ec 01       	movw	r28, r24
	for(int i = 0; message[i] != '\0'; i++){
 578:	88 81       	ld	r24, Y
 57a:	88 23       	and	r24, r24
 57c:	31 f0       	breq	.+12     	; 0x58a <LCD_String+0x18>
 57e:	21 96       	adiw	r28, 0x01	; 1
		LCD_Send_Char(message[i]);
 580:	0e 94 a1 02 	call	0x542	; 0x542 <LCD_Send_Char>
	LCD_Send_Byte(0x1, 0);
	_delay_us(1500);
}

void LCD_String(char* message){
	for(int i = 0; message[i] != '\0'; i++){
 584:	89 91       	ld	r24, Y+
 586:	81 11       	cpse	r24, r1
 588:	fb cf       	rjmp	.-10     	; 0x580 <LCD_String+0xe>
		LCD_Send_Char(message[i]);
	}
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	08 95       	ret

00000590 <GPIO_Init>:
	UART_init(51);
}

void GPIO_Init(){
	//Configuring Led
	DDRD  |=   (1 << Led_Blue)|(1 << Led_Red);
 590:	81 b3       	in	r24, 0x11	; 17
 592:	80 66       	ori	r24, 0x60	; 96
 594:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~((1 << Led_Blue)|(1 << Led_Red));
 596:	82 b3       	in	r24, 0x12	; 18
 598:	8f 79       	andi	r24, 0x9F	; 159
 59a:	82 bb       	out	0x12, r24	; 18
	//Configuring Buttons
	DDRB  &= ~((1 << Button_Ok)|(1 << Button_Set));
 59c:	87 b3       	in	r24, 0x17	; 23
 59e:	8c 7f       	andi	r24, 0xFC	; 252
 5a0:	87 bb       	out	0x17, r24	; 23
	PORTB |=  (1 << Button_Ok)|(1 << Button_Set);
 5a2:	88 b3       	in	r24, 0x18	; 24
 5a4:	83 60       	ori	r24, 0x03	; 3
 5a6:	88 bb       	out	0x18, r24	; 24
	//Configuring Buzzer
	DDRA  |=  (1 << Buzzer);
 5a8:	d0 9a       	sbi	0x1a, 0	; 26
	PORTA &= ~(1 << Buzzer);
 5aa:	d8 98       	cbi	0x1b, 0	; 27
	//Configuring LCD pins
	DDRC  =  255;
 5ac:	8f ef       	ldi	r24, 0xFF	; 255
 5ae:	84 bb       	out	0x14, r24	; 20
	PORTC =  0;
 5b0:	15 ba       	out	0x15, r1	; 21
 5b2:	08 95       	ret

000005b4 <MCU_Init>:
#include "MCU_Init.h"
#include "Timer.h"
#include "LCD.h"

void MCU_Init(){
	Timer_Init();
 5b4:	0e 94 01 03 	call	0x602	; 0x602 <Timer_Init>
	GPIO_Init();
 5b8:	0e 94 c8 02 	call	0x590	; 0x590 <GPIO_Init>
	LCD_Init();
 5bc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <LCD_Init>
	I2C_init();
 5c0:	0e 94 2f 02 	call	0x45e	; 0x45e <I2C_init>
	UART_init(51);
 5c4:	83 e3       	ldi	r24, 0x33	; 51
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	0e 94 0e 03 	call	0x61c	; 0x61c <UART_init>
 5cc:	08 95       	ret

000005ce <__vector_6>:
#include "Timer.h"
volatile uint8_t timer_flag = 0;
ISR(TIMER1_COMPA_vect){
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
 5d8:	8f 93       	push	r24
	if(timer_flag == 0)
 5da:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <timer_flag>
 5de:	81 11       	cpse	r24, r1
 5e0:	04 c0       	rjmp	.+8      	; 0x5ea <__vector_6+0x1c>
		timer_flag = 1;
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <timer_flag>
 5e8:	06 c0       	rjmp	.+12     	; 0x5f6 <__vector_6+0x28>
	else if(timer_flag == 1)
 5ea:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <timer_flag>
 5ee:	81 30       	cpi	r24, 0x01	; 1
 5f0:	11 f4       	brne	.+4      	; 0x5f6 <__vector_6+0x28>
		timer_flag = 0;
 5f2:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <timer_flag>
}
 5f6:	8f 91       	pop	r24
 5f8:	0f 90       	pop	r0
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	0f 90       	pop	r0
 5fe:	1f 90       	pop	r1
 600:	18 95       	reti

00000602 <Timer_Init>:

void Timer_Init(){
	TCCR1B |= (1 << WGM12);
 602:	8e b5       	in	r24, 0x2e	; 46
 604:	88 60       	ori	r24, 0x08	; 8
 606:	8e bd       	out	0x2e, r24	; 46
	TIMSK  |= (1 << OCIE1A);
 608:	89 b7       	in	r24, 0x39	; 57
 60a:	80 61       	ori	r24, 0x10	; 16
 60c:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0x00;
 60e:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0xFF;
 610:	8f ef       	ldi	r24, 0xFF	; 255
 612:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << CS12);
 614:	8e b5       	in	r24, 0x2e	; 46
 616:	84 60       	ori	r24, 0x04	; 4
 618:	8e bd       	out	0x2e, r24	; 46
 61a:	08 95       	ret

0000061c <UART_init>:
#include "UART.h"

void UART_init(unsigned int speed){
	UBRRH = (unsigned char)(speed>>8);
 61c:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)speed;
 61e:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1 << RXEN)|(1 << TXEN);
 620:	88 e1       	ldi	r24, 0x18	; 24
 622:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (1 << RXCIE);
 624:	57 9a       	sbi	0x0a, 7	; 10
	UCSRC = (1 << URSEL)|(1 << USBS)|(1 << UCSZ1)|(1 << UCSZ0);
 626:	8e e8       	ldi	r24, 0x8E	; 142
 628:	80 bd       	out	0x20, r24	; 32
 62a:	08 95       	ret

0000062c <main>:
#include "Timer.h"
#include "Clock.h"

int main(void){
	
	MCU_Init();
 62c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <MCU_Init>
	//sei();
	LCD_Clear();
 630:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_Clear>
	LCD_String("Alarm");
 634:	8f ec       	ldi	r24, 0xCF	; 207
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_String>
	while (1){
		Clock_Alarm();
 63c:	0e 94 98 01 	call	0x330	; 0x330 <Clock_Alarm>
 640:	fd cf       	rjmp	.-6      	; 0x63c <main+0x10>

00000642 <sprintf>:
 642:	ae e0       	ldi	r26, 0x0E	; 14
 644:	b0 e0       	ldi	r27, 0x00	; 0
 646:	e7 e2       	ldi	r30, 0x27	; 39
 648:	f3 e0       	ldi	r31, 0x03	; 3
 64a:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__prologue_saves__+0x1c>
 64e:	0d 89       	ldd	r16, Y+21	; 0x15
 650:	1e 89       	ldd	r17, Y+22	; 0x16
 652:	86 e0       	ldi	r24, 0x06	; 6
 654:	8c 83       	std	Y+4, r24	; 0x04
 656:	1a 83       	std	Y+2, r17	; 0x02
 658:	09 83       	std	Y+1, r16	; 0x01
 65a:	8f ef       	ldi	r24, 0xFF	; 255
 65c:	9f e7       	ldi	r25, 0x7F	; 127
 65e:	9e 83       	std	Y+6, r25	; 0x06
 660:	8d 83       	std	Y+5, r24	; 0x05
 662:	ae 01       	movw	r20, r28
 664:	47 5e       	subi	r20, 0xE7	; 231
 666:	5f 4f       	sbci	r21, 0xFF	; 255
 668:	6f 89       	ldd	r22, Y+23	; 0x17
 66a:	78 8d       	ldd	r23, Y+24	; 0x18
 66c:	ce 01       	movw	r24, r28
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	0e 94 43 03 	call	0x686	; 0x686 <vfprintf>
 674:	ef 81       	ldd	r30, Y+7	; 0x07
 676:	f8 85       	ldd	r31, Y+8	; 0x08
 678:	e0 0f       	add	r30, r16
 67a:	f1 1f       	adc	r31, r17
 67c:	10 82       	st	Z, r1
 67e:	2e 96       	adiw	r28, 0x0e	; 14
 680:	e4 e0       	ldi	r30, 0x04	; 4
 682:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__epilogue_restores__+0x1c>

00000686 <vfprintf>:
 686:	ab e0       	ldi	r26, 0x0B	; 11
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	e9 e4       	ldi	r30, 0x49	; 73
 68c:	f3 e0       	ldi	r31, 0x03	; 3
 68e:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__prologue_saves__>
 692:	6c 01       	movw	r12, r24
 694:	7b 01       	movw	r14, r22
 696:	8a 01       	movw	r16, r20
 698:	fc 01       	movw	r30, r24
 69a:	17 82       	std	Z+7, r1	; 0x07
 69c:	16 82       	std	Z+6, r1	; 0x06
 69e:	83 81       	ldd	r24, Z+3	; 0x03
 6a0:	81 ff       	sbrs	r24, 1
 6a2:	cc c1       	rjmp	.+920    	; 0xa3c <vfprintf+0x3b6>
 6a4:	ce 01       	movw	r24, r28
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	3c 01       	movw	r6, r24
 6aa:	f6 01       	movw	r30, r12
 6ac:	93 81       	ldd	r25, Z+3	; 0x03
 6ae:	f7 01       	movw	r30, r14
 6b0:	93 fd       	sbrc	r25, 3
 6b2:	85 91       	lpm	r24, Z+
 6b4:	93 ff       	sbrs	r25, 3
 6b6:	81 91       	ld	r24, Z+
 6b8:	7f 01       	movw	r14, r30
 6ba:	88 23       	and	r24, r24
 6bc:	09 f4       	brne	.+2      	; 0x6c0 <vfprintf+0x3a>
 6be:	ba c1       	rjmp	.+884    	; 0xa34 <vfprintf+0x3ae>
 6c0:	85 32       	cpi	r24, 0x25	; 37
 6c2:	39 f4       	brne	.+14     	; 0x6d2 <vfprintf+0x4c>
 6c4:	93 fd       	sbrc	r25, 3
 6c6:	85 91       	lpm	r24, Z+
 6c8:	93 ff       	sbrs	r25, 3
 6ca:	81 91       	ld	r24, Z+
 6cc:	7f 01       	movw	r14, r30
 6ce:	85 32       	cpi	r24, 0x25	; 37
 6d0:	29 f4       	brne	.+10     	; 0x6dc <vfprintf+0x56>
 6d2:	b6 01       	movw	r22, r12
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 6da:	e7 cf       	rjmp	.-50     	; 0x6aa <vfprintf+0x24>
 6dc:	91 2c       	mov	r9, r1
 6de:	21 2c       	mov	r2, r1
 6e0:	31 2c       	mov	r3, r1
 6e2:	ff e1       	ldi	r31, 0x1F	; 31
 6e4:	f3 15       	cp	r31, r3
 6e6:	d8 f0       	brcs	.+54     	; 0x71e <vfprintf+0x98>
 6e8:	8b 32       	cpi	r24, 0x2B	; 43
 6ea:	79 f0       	breq	.+30     	; 0x70a <vfprintf+0x84>
 6ec:	38 f4       	brcc	.+14     	; 0x6fc <vfprintf+0x76>
 6ee:	80 32       	cpi	r24, 0x20	; 32
 6f0:	79 f0       	breq	.+30     	; 0x710 <vfprintf+0x8a>
 6f2:	83 32       	cpi	r24, 0x23	; 35
 6f4:	a1 f4       	brne	.+40     	; 0x71e <vfprintf+0x98>
 6f6:	23 2d       	mov	r18, r3
 6f8:	20 61       	ori	r18, 0x10	; 16
 6fa:	1d c0       	rjmp	.+58     	; 0x736 <vfprintf+0xb0>
 6fc:	8d 32       	cpi	r24, 0x2D	; 45
 6fe:	61 f0       	breq	.+24     	; 0x718 <vfprintf+0x92>
 700:	80 33       	cpi	r24, 0x30	; 48
 702:	69 f4       	brne	.+26     	; 0x71e <vfprintf+0x98>
 704:	23 2d       	mov	r18, r3
 706:	21 60       	ori	r18, 0x01	; 1
 708:	16 c0       	rjmp	.+44     	; 0x736 <vfprintf+0xb0>
 70a:	83 2d       	mov	r24, r3
 70c:	82 60       	ori	r24, 0x02	; 2
 70e:	38 2e       	mov	r3, r24
 710:	e3 2d       	mov	r30, r3
 712:	e4 60       	ori	r30, 0x04	; 4
 714:	3e 2e       	mov	r3, r30
 716:	2a c0       	rjmp	.+84     	; 0x76c <vfprintf+0xe6>
 718:	f3 2d       	mov	r31, r3
 71a:	f8 60       	ori	r31, 0x08	; 8
 71c:	1d c0       	rjmp	.+58     	; 0x758 <vfprintf+0xd2>
 71e:	37 fc       	sbrc	r3, 7
 720:	2d c0       	rjmp	.+90     	; 0x77c <vfprintf+0xf6>
 722:	20 ed       	ldi	r18, 0xD0	; 208
 724:	28 0f       	add	r18, r24
 726:	2a 30       	cpi	r18, 0x0A	; 10
 728:	40 f0       	brcs	.+16     	; 0x73a <vfprintf+0xb4>
 72a:	8e 32       	cpi	r24, 0x2E	; 46
 72c:	b9 f4       	brne	.+46     	; 0x75c <vfprintf+0xd6>
 72e:	36 fc       	sbrc	r3, 6
 730:	81 c1       	rjmp	.+770    	; 0xa34 <vfprintf+0x3ae>
 732:	23 2d       	mov	r18, r3
 734:	20 64       	ori	r18, 0x40	; 64
 736:	32 2e       	mov	r3, r18
 738:	19 c0       	rjmp	.+50     	; 0x76c <vfprintf+0xe6>
 73a:	36 fe       	sbrs	r3, 6
 73c:	06 c0       	rjmp	.+12     	; 0x74a <vfprintf+0xc4>
 73e:	8a e0       	ldi	r24, 0x0A	; 10
 740:	98 9e       	mul	r9, r24
 742:	20 0d       	add	r18, r0
 744:	11 24       	eor	r1, r1
 746:	92 2e       	mov	r9, r18
 748:	11 c0       	rjmp	.+34     	; 0x76c <vfprintf+0xe6>
 74a:	ea e0       	ldi	r30, 0x0A	; 10
 74c:	2e 9e       	mul	r2, r30
 74e:	20 0d       	add	r18, r0
 750:	11 24       	eor	r1, r1
 752:	22 2e       	mov	r2, r18
 754:	f3 2d       	mov	r31, r3
 756:	f0 62       	ori	r31, 0x20	; 32
 758:	3f 2e       	mov	r3, r31
 75a:	08 c0       	rjmp	.+16     	; 0x76c <vfprintf+0xe6>
 75c:	8c 36       	cpi	r24, 0x6C	; 108
 75e:	21 f4       	brne	.+8      	; 0x768 <vfprintf+0xe2>
 760:	83 2d       	mov	r24, r3
 762:	80 68       	ori	r24, 0x80	; 128
 764:	38 2e       	mov	r3, r24
 766:	02 c0       	rjmp	.+4      	; 0x76c <vfprintf+0xe6>
 768:	88 36       	cpi	r24, 0x68	; 104
 76a:	41 f4       	brne	.+16     	; 0x77c <vfprintf+0xf6>
 76c:	f7 01       	movw	r30, r14
 76e:	93 fd       	sbrc	r25, 3
 770:	85 91       	lpm	r24, Z+
 772:	93 ff       	sbrs	r25, 3
 774:	81 91       	ld	r24, Z+
 776:	7f 01       	movw	r14, r30
 778:	81 11       	cpse	r24, r1
 77a:	b3 cf       	rjmp	.-154    	; 0x6e2 <vfprintf+0x5c>
 77c:	98 2f       	mov	r25, r24
 77e:	9f 7d       	andi	r25, 0xDF	; 223
 780:	95 54       	subi	r25, 0x45	; 69
 782:	93 30       	cpi	r25, 0x03	; 3
 784:	28 f4       	brcc	.+10     	; 0x790 <vfprintf+0x10a>
 786:	0c 5f       	subi	r16, 0xFC	; 252
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	9f e3       	ldi	r25, 0x3F	; 63
 78c:	99 83       	std	Y+1, r25	; 0x01
 78e:	0d c0       	rjmp	.+26     	; 0x7aa <vfprintf+0x124>
 790:	83 36       	cpi	r24, 0x63	; 99
 792:	31 f0       	breq	.+12     	; 0x7a0 <vfprintf+0x11a>
 794:	83 37       	cpi	r24, 0x73	; 115
 796:	71 f0       	breq	.+28     	; 0x7b4 <vfprintf+0x12e>
 798:	83 35       	cpi	r24, 0x53	; 83
 79a:	09 f0       	breq	.+2      	; 0x79e <vfprintf+0x118>
 79c:	59 c0       	rjmp	.+178    	; 0x850 <vfprintf+0x1ca>
 79e:	21 c0       	rjmp	.+66     	; 0x7e2 <vfprintf+0x15c>
 7a0:	f8 01       	movw	r30, r16
 7a2:	80 81       	ld	r24, Z
 7a4:	89 83       	std	Y+1, r24	; 0x01
 7a6:	0e 5f       	subi	r16, 0xFE	; 254
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	88 24       	eor	r8, r8
 7ac:	83 94       	inc	r8
 7ae:	91 2c       	mov	r9, r1
 7b0:	53 01       	movw	r10, r6
 7b2:	13 c0       	rjmp	.+38     	; 0x7da <vfprintf+0x154>
 7b4:	28 01       	movw	r4, r16
 7b6:	f2 e0       	ldi	r31, 0x02	; 2
 7b8:	4f 0e       	add	r4, r31
 7ba:	51 1c       	adc	r5, r1
 7bc:	f8 01       	movw	r30, r16
 7be:	a0 80       	ld	r10, Z
 7c0:	b1 80       	ldd	r11, Z+1	; 0x01
 7c2:	36 fe       	sbrs	r3, 6
 7c4:	03 c0       	rjmp	.+6      	; 0x7cc <vfprintf+0x146>
 7c6:	69 2d       	mov	r22, r9
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <vfprintf+0x14a>
 7cc:	6f ef       	ldi	r22, 0xFF	; 255
 7ce:	7f ef       	ldi	r23, 0xFF	; 255
 7d0:	c5 01       	movw	r24, r10
 7d2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <strnlen>
 7d6:	4c 01       	movw	r8, r24
 7d8:	82 01       	movw	r16, r4
 7da:	f3 2d       	mov	r31, r3
 7dc:	ff 77       	andi	r31, 0x7F	; 127
 7de:	3f 2e       	mov	r3, r31
 7e0:	16 c0       	rjmp	.+44     	; 0x80e <vfprintf+0x188>
 7e2:	28 01       	movw	r4, r16
 7e4:	22 e0       	ldi	r18, 0x02	; 2
 7e6:	42 0e       	add	r4, r18
 7e8:	51 1c       	adc	r5, r1
 7ea:	f8 01       	movw	r30, r16
 7ec:	a0 80       	ld	r10, Z
 7ee:	b1 80       	ldd	r11, Z+1	; 0x01
 7f0:	36 fe       	sbrs	r3, 6
 7f2:	03 c0       	rjmp	.+6      	; 0x7fa <vfprintf+0x174>
 7f4:	69 2d       	mov	r22, r9
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <vfprintf+0x178>
 7fa:	6f ef       	ldi	r22, 0xFF	; 255
 7fc:	7f ef       	ldi	r23, 0xFF	; 255
 7fe:	c5 01       	movw	r24, r10
 800:	0e 94 24 05 	call	0xa48	; 0xa48 <strnlen_P>
 804:	4c 01       	movw	r8, r24
 806:	f3 2d       	mov	r31, r3
 808:	f0 68       	ori	r31, 0x80	; 128
 80a:	3f 2e       	mov	r3, r31
 80c:	82 01       	movw	r16, r4
 80e:	33 fc       	sbrc	r3, 3
 810:	1b c0       	rjmp	.+54     	; 0x848 <vfprintf+0x1c2>
 812:	82 2d       	mov	r24, r2
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	88 16       	cp	r8, r24
 818:	99 06       	cpc	r9, r25
 81a:	b0 f4       	brcc	.+44     	; 0x848 <vfprintf+0x1c2>
 81c:	b6 01       	movw	r22, r12
 81e:	80 e2       	ldi	r24, 0x20	; 32
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 826:	2a 94       	dec	r2
 828:	f4 cf       	rjmp	.-24     	; 0x812 <vfprintf+0x18c>
 82a:	f5 01       	movw	r30, r10
 82c:	37 fc       	sbrc	r3, 7
 82e:	85 91       	lpm	r24, Z+
 830:	37 fe       	sbrs	r3, 7
 832:	81 91       	ld	r24, Z+
 834:	5f 01       	movw	r10, r30
 836:	b6 01       	movw	r22, r12
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 83e:	21 10       	cpse	r2, r1
 840:	2a 94       	dec	r2
 842:	21 e0       	ldi	r18, 0x01	; 1
 844:	82 1a       	sub	r8, r18
 846:	91 08       	sbc	r9, r1
 848:	81 14       	cp	r8, r1
 84a:	91 04       	cpc	r9, r1
 84c:	71 f7       	brne	.-36     	; 0x82a <vfprintf+0x1a4>
 84e:	e8 c0       	rjmp	.+464    	; 0xa20 <vfprintf+0x39a>
 850:	84 36       	cpi	r24, 0x64	; 100
 852:	11 f0       	breq	.+4      	; 0x858 <vfprintf+0x1d2>
 854:	89 36       	cpi	r24, 0x69	; 105
 856:	41 f5       	brne	.+80     	; 0x8a8 <vfprintf+0x222>
 858:	f8 01       	movw	r30, r16
 85a:	37 fe       	sbrs	r3, 7
 85c:	07 c0       	rjmp	.+14     	; 0x86c <vfprintf+0x1e6>
 85e:	60 81       	ld	r22, Z
 860:	71 81       	ldd	r23, Z+1	; 0x01
 862:	82 81       	ldd	r24, Z+2	; 0x02
 864:	93 81       	ldd	r25, Z+3	; 0x03
 866:	0c 5f       	subi	r16, 0xFC	; 252
 868:	1f 4f       	sbci	r17, 0xFF	; 255
 86a:	08 c0       	rjmp	.+16     	; 0x87c <vfprintf+0x1f6>
 86c:	60 81       	ld	r22, Z
 86e:	71 81       	ldd	r23, Z+1	; 0x01
 870:	07 2e       	mov	r0, r23
 872:	00 0c       	add	r0, r0
 874:	88 0b       	sbc	r24, r24
 876:	99 0b       	sbc	r25, r25
 878:	0e 5f       	subi	r16, 0xFE	; 254
 87a:	1f 4f       	sbci	r17, 0xFF	; 255
 87c:	f3 2d       	mov	r31, r3
 87e:	ff 76       	andi	r31, 0x6F	; 111
 880:	3f 2e       	mov	r3, r31
 882:	97 ff       	sbrs	r25, 7
 884:	09 c0       	rjmp	.+18     	; 0x898 <vfprintf+0x212>
 886:	90 95       	com	r25
 888:	80 95       	com	r24
 88a:	70 95       	com	r23
 88c:	61 95       	neg	r22
 88e:	7f 4f       	sbci	r23, 0xFF	; 255
 890:	8f 4f       	sbci	r24, 0xFF	; 255
 892:	9f 4f       	sbci	r25, 0xFF	; 255
 894:	f0 68       	ori	r31, 0x80	; 128
 896:	3f 2e       	mov	r3, r31
 898:	2a e0       	ldi	r18, 0x0A	; 10
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	a3 01       	movw	r20, r6
 89e:	0e 94 76 05 	call	0xaec	; 0xaec <__ultoa_invert>
 8a2:	88 2e       	mov	r8, r24
 8a4:	86 18       	sub	r8, r6
 8a6:	45 c0       	rjmp	.+138    	; 0x932 <vfprintf+0x2ac>
 8a8:	85 37       	cpi	r24, 0x75	; 117
 8aa:	31 f4       	brne	.+12     	; 0x8b8 <vfprintf+0x232>
 8ac:	23 2d       	mov	r18, r3
 8ae:	2f 7e       	andi	r18, 0xEF	; 239
 8b0:	b2 2e       	mov	r11, r18
 8b2:	2a e0       	ldi	r18, 0x0A	; 10
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	25 c0       	rjmp	.+74     	; 0x902 <vfprintf+0x27c>
 8b8:	93 2d       	mov	r25, r3
 8ba:	99 7f       	andi	r25, 0xF9	; 249
 8bc:	b9 2e       	mov	r11, r25
 8be:	8f 36       	cpi	r24, 0x6F	; 111
 8c0:	c1 f0       	breq	.+48     	; 0x8f2 <vfprintf+0x26c>
 8c2:	18 f4       	brcc	.+6      	; 0x8ca <vfprintf+0x244>
 8c4:	88 35       	cpi	r24, 0x58	; 88
 8c6:	79 f0       	breq	.+30     	; 0x8e6 <vfprintf+0x260>
 8c8:	b5 c0       	rjmp	.+362    	; 0xa34 <vfprintf+0x3ae>
 8ca:	80 37       	cpi	r24, 0x70	; 112
 8cc:	19 f0       	breq	.+6      	; 0x8d4 <vfprintf+0x24e>
 8ce:	88 37       	cpi	r24, 0x78	; 120
 8d0:	21 f0       	breq	.+8      	; 0x8da <vfprintf+0x254>
 8d2:	b0 c0       	rjmp	.+352    	; 0xa34 <vfprintf+0x3ae>
 8d4:	e9 2f       	mov	r30, r25
 8d6:	e0 61       	ori	r30, 0x10	; 16
 8d8:	be 2e       	mov	r11, r30
 8da:	b4 fe       	sbrs	r11, 4
 8dc:	0d c0       	rjmp	.+26     	; 0x8f8 <vfprintf+0x272>
 8de:	fb 2d       	mov	r31, r11
 8e0:	f4 60       	ori	r31, 0x04	; 4
 8e2:	bf 2e       	mov	r11, r31
 8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <vfprintf+0x272>
 8e6:	34 fe       	sbrs	r3, 4
 8e8:	0a c0       	rjmp	.+20     	; 0x8fe <vfprintf+0x278>
 8ea:	29 2f       	mov	r18, r25
 8ec:	26 60       	ori	r18, 0x06	; 6
 8ee:	b2 2e       	mov	r11, r18
 8f0:	06 c0       	rjmp	.+12     	; 0x8fe <vfprintf+0x278>
 8f2:	28 e0       	ldi	r18, 0x08	; 8
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	05 c0       	rjmp	.+10     	; 0x902 <vfprintf+0x27c>
 8f8:	20 e1       	ldi	r18, 0x10	; 16
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <vfprintf+0x27c>
 8fe:	20 e1       	ldi	r18, 0x10	; 16
 900:	32 e0       	ldi	r19, 0x02	; 2
 902:	f8 01       	movw	r30, r16
 904:	b7 fe       	sbrs	r11, 7
 906:	07 c0       	rjmp	.+14     	; 0x916 <vfprintf+0x290>
 908:	60 81       	ld	r22, Z
 90a:	71 81       	ldd	r23, Z+1	; 0x01
 90c:	82 81       	ldd	r24, Z+2	; 0x02
 90e:	93 81       	ldd	r25, Z+3	; 0x03
 910:	0c 5f       	subi	r16, 0xFC	; 252
 912:	1f 4f       	sbci	r17, 0xFF	; 255
 914:	06 c0       	rjmp	.+12     	; 0x922 <vfprintf+0x29c>
 916:	60 81       	ld	r22, Z
 918:	71 81       	ldd	r23, Z+1	; 0x01
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 5f       	subi	r16, 0xFE	; 254
 920:	1f 4f       	sbci	r17, 0xFF	; 255
 922:	a3 01       	movw	r20, r6
 924:	0e 94 76 05 	call	0xaec	; 0xaec <__ultoa_invert>
 928:	88 2e       	mov	r8, r24
 92a:	86 18       	sub	r8, r6
 92c:	fb 2d       	mov	r31, r11
 92e:	ff 77       	andi	r31, 0x7F	; 127
 930:	3f 2e       	mov	r3, r31
 932:	36 fe       	sbrs	r3, 6
 934:	0d c0       	rjmp	.+26     	; 0x950 <vfprintf+0x2ca>
 936:	23 2d       	mov	r18, r3
 938:	2e 7f       	andi	r18, 0xFE	; 254
 93a:	a2 2e       	mov	r10, r18
 93c:	89 14       	cp	r8, r9
 93e:	58 f4       	brcc	.+22     	; 0x956 <vfprintf+0x2d0>
 940:	34 fe       	sbrs	r3, 4
 942:	0b c0       	rjmp	.+22     	; 0x95a <vfprintf+0x2d4>
 944:	32 fc       	sbrc	r3, 2
 946:	09 c0       	rjmp	.+18     	; 0x95a <vfprintf+0x2d4>
 948:	83 2d       	mov	r24, r3
 94a:	8e 7e       	andi	r24, 0xEE	; 238
 94c:	a8 2e       	mov	r10, r24
 94e:	05 c0       	rjmp	.+10     	; 0x95a <vfprintf+0x2d4>
 950:	b8 2c       	mov	r11, r8
 952:	a3 2c       	mov	r10, r3
 954:	03 c0       	rjmp	.+6      	; 0x95c <vfprintf+0x2d6>
 956:	b8 2c       	mov	r11, r8
 958:	01 c0       	rjmp	.+2      	; 0x95c <vfprintf+0x2d6>
 95a:	b9 2c       	mov	r11, r9
 95c:	a4 fe       	sbrs	r10, 4
 95e:	0f c0       	rjmp	.+30     	; 0x97e <vfprintf+0x2f8>
 960:	fe 01       	movw	r30, r28
 962:	e8 0d       	add	r30, r8
 964:	f1 1d       	adc	r31, r1
 966:	80 81       	ld	r24, Z
 968:	80 33       	cpi	r24, 0x30	; 48
 96a:	21 f4       	brne	.+8      	; 0x974 <vfprintf+0x2ee>
 96c:	9a 2d       	mov	r25, r10
 96e:	99 7e       	andi	r25, 0xE9	; 233
 970:	a9 2e       	mov	r10, r25
 972:	09 c0       	rjmp	.+18     	; 0x986 <vfprintf+0x300>
 974:	a2 fe       	sbrs	r10, 2
 976:	06 c0       	rjmp	.+12     	; 0x984 <vfprintf+0x2fe>
 978:	b3 94       	inc	r11
 97a:	b3 94       	inc	r11
 97c:	04 c0       	rjmp	.+8      	; 0x986 <vfprintf+0x300>
 97e:	8a 2d       	mov	r24, r10
 980:	86 78       	andi	r24, 0x86	; 134
 982:	09 f0       	breq	.+2      	; 0x986 <vfprintf+0x300>
 984:	b3 94       	inc	r11
 986:	a3 fc       	sbrc	r10, 3
 988:	11 c0       	rjmp	.+34     	; 0x9ac <vfprintf+0x326>
 98a:	a0 fe       	sbrs	r10, 0
 98c:	06 c0       	rjmp	.+12     	; 0x99a <vfprintf+0x314>
 98e:	b2 14       	cp	r11, r2
 990:	88 f4       	brcc	.+34     	; 0x9b4 <vfprintf+0x32e>
 992:	28 0c       	add	r2, r8
 994:	92 2c       	mov	r9, r2
 996:	9b 18       	sub	r9, r11
 998:	0e c0       	rjmp	.+28     	; 0x9b6 <vfprintf+0x330>
 99a:	b2 14       	cp	r11, r2
 99c:	60 f4       	brcc	.+24     	; 0x9b6 <vfprintf+0x330>
 99e:	b6 01       	movw	r22, r12
 9a0:	80 e2       	ldi	r24, 0x20	; 32
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 9a8:	b3 94       	inc	r11
 9aa:	f7 cf       	rjmp	.-18     	; 0x99a <vfprintf+0x314>
 9ac:	b2 14       	cp	r11, r2
 9ae:	18 f4       	brcc	.+6      	; 0x9b6 <vfprintf+0x330>
 9b0:	2b 18       	sub	r2, r11
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <vfprintf+0x332>
 9b4:	98 2c       	mov	r9, r8
 9b6:	21 2c       	mov	r2, r1
 9b8:	a4 fe       	sbrs	r10, 4
 9ba:	10 c0       	rjmp	.+32     	; 0x9dc <vfprintf+0x356>
 9bc:	b6 01       	movw	r22, r12
 9be:	80 e3       	ldi	r24, 0x30	; 48
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 9c6:	a2 fe       	sbrs	r10, 2
 9c8:	17 c0       	rjmp	.+46     	; 0x9f8 <vfprintf+0x372>
 9ca:	a1 fc       	sbrc	r10, 1
 9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <vfprintf+0x34e>
 9ce:	88 e7       	ldi	r24, 0x78	; 120
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <vfprintf+0x352>
 9d4:	88 e5       	ldi	r24, 0x58	; 88
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	b6 01       	movw	r22, r12
 9da:	0c c0       	rjmp	.+24     	; 0x9f4 <vfprintf+0x36e>
 9dc:	8a 2d       	mov	r24, r10
 9de:	86 78       	andi	r24, 0x86	; 134
 9e0:	59 f0       	breq	.+22     	; 0x9f8 <vfprintf+0x372>
 9e2:	a1 fe       	sbrs	r10, 1
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <vfprintf+0x364>
 9e6:	8b e2       	ldi	r24, 0x2B	; 43
 9e8:	01 c0       	rjmp	.+2      	; 0x9ec <vfprintf+0x366>
 9ea:	80 e2       	ldi	r24, 0x20	; 32
 9ec:	a7 fc       	sbrc	r10, 7
 9ee:	8d e2       	ldi	r24, 0x2D	; 45
 9f0:	b6 01       	movw	r22, r12
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 9f8:	89 14       	cp	r8, r9
 9fa:	38 f4       	brcc	.+14     	; 0xa0a <vfprintf+0x384>
 9fc:	b6 01       	movw	r22, r12
 9fe:	80 e3       	ldi	r24, 0x30	; 48
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 a06:	9a 94       	dec	r9
 a08:	f7 cf       	rjmp	.-18     	; 0x9f8 <vfprintf+0x372>
 a0a:	8a 94       	dec	r8
 a0c:	f3 01       	movw	r30, r6
 a0e:	e8 0d       	add	r30, r8
 a10:	f1 1d       	adc	r31, r1
 a12:	80 81       	ld	r24, Z
 a14:	b6 01       	movw	r22, r12
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 a1c:	81 10       	cpse	r8, r1
 a1e:	f5 cf       	rjmp	.-22     	; 0xa0a <vfprintf+0x384>
 a20:	22 20       	and	r2, r2
 a22:	09 f4       	brne	.+2      	; 0xa26 <vfprintf+0x3a0>
 a24:	42 ce       	rjmp	.-892    	; 0x6aa <vfprintf+0x24>
 a26:	b6 01       	movw	r22, r12
 a28:	80 e2       	ldi	r24, 0x20	; 32
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	0e 94 3a 05 	call	0xa74	; 0xa74 <fputc>
 a30:	2a 94       	dec	r2
 a32:	f6 cf       	rjmp	.-20     	; 0xa20 <vfprintf+0x39a>
 a34:	f6 01       	movw	r30, r12
 a36:	86 81       	ldd	r24, Z+6	; 0x06
 a38:	97 81       	ldd	r25, Z+7	; 0x07
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <vfprintf+0x3ba>
 a3c:	8f ef       	ldi	r24, 0xFF	; 255
 a3e:	9f ef       	ldi	r25, 0xFF	; 255
 a40:	2b 96       	adiw	r28, 0x0b	; 11
 a42:	e2 e1       	ldi	r30, 0x12	; 18
 a44:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__epilogue_restores__>

00000a48 <strnlen_P>:
 a48:	fc 01       	movw	r30, r24
 a4a:	05 90       	lpm	r0, Z+
 a4c:	61 50       	subi	r22, 0x01	; 1
 a4e:	70 40       	sbci	r23, 0x00	; 0
 a50:	01 10       	cpse	r0, r1
 a52:	d8 f7       	brcc	.-10     	; 0xa4a <strnlen_P+0x2>
 a54:	80 95       	com	r24
 a56:	90 95       	com	r25
 a58:	8e 0f       	add	r24, r30
 a5a:	9f 1f       	adc	r25, r31
 a5c:	08 95       	ret

00000a5e <strnlen>:
 a5e:	fc 01       	movw	r30, r24
 a60:	61 50       	subi	r22, 0x01	; 1
 a62:	70 40       	sbci	r23, 0x00	; 0
 a64:	01 90       	ld	r0, Z+
 a66:	01 10       	cpse	r0, r1
 a68:	d8 f7       	brcc	.-10     	; 0xa60 <strnlen+0x2>
 a6a:	80 95       	com	r24
 a6c:	90 95       	com	r25
 a6e:	8e 0f       	add	r24, r30
 a70:	9f 1f       	adc	r25, r31
 a72:	08 95       	ret

00000a74 <fputc>:
 a74:	0f 93       	push	r16
 a76:	1f 93       	push	r17
 a78:	cf 93       	push	r28
 a7a:	df 93       	push	r29
 a7c:	fb 01       	movw	r30, r22
 a7e:	23 81       	ldd	r18, Z+3	; 0x03
 a80:	21 fd       	sbrc	r18, 1
 a82:	03 c0       	rjmp	.+6      	; 0xa8a <fputc+0x16>
 a84:	8f ef       	ldi	r24, 0xFF	; 255
 a86:	9f ef       	ldi	r25, 0xFF	; 255
 a88:	2c c0       	rjmp	.+88     	; 0xae2 <fputc+0x6e>
 a8a:	22 ff       	sbrs	r18, 2
 a8c:	16 c0       	rjmp	.+44     	; 0xaba <fputc+0x46>
 a8e:	46 81       	ldd	r20, Z+6	; 0x06
 a90:	57 81       	ldd	r21, Z+7	; 0x07
 a92:	24 81       	ldd	r18, Z+4	; 0x04
 a94:	35 81       	ldd	r19, Z+5	; 0x05
 a96:	42 17       	cp	r20, r18
 a98:	53 07       	cpc	r21, r19
 a9a:	44 f4       	brge	.+16     	; 0xaac <fputc+0x38>
 a9c:	a0 81       	ld	r26, Z
 a9e:	b1 81       	ldd	r27, Z+1	; 0x01
 aa0:	9d 01       	movw	r18, r26
 aa2:	2f 5f       	subi	r18, 0xFF	; 255
 aa4:	3f 4f       	sbci	r19, 0xFF	; 255
 aa6:	31 83       	std	Z+1, r19	; 0x01
 aa8:	20 83       	st	Z, r18
 aaa:	8c 93       	st	X, r24
 aac:	26 81       	ldd	r18, Z+6	; 0x06
 aae:	37 81       	ldd	r19, Z+7	; 0x07
 ab0:	2f 5f       	subi	r18, 0xFF	; 255
 ab2:	3f 4f       	sbci	r19, 0xFF	; 255
 ab4:	37 83       	std	Z+7, r19	; 0x07
 ab6:	26 83       	std	Z+6, r18	; 0x06
 ab8:	14 c0       	rjmp	.+40     	; 0xae2 <fputc+0x6e>
 aba:	8b 01       	movw	r16, r22
 abc:	ec 01       	movw	r28, r24
 abe:	fb 01       	movw	r30, r22
 ac0:	00 84       	ldd	r0, Z+8	; 0x08
 ac2:	f1 85       	ldd	r31, Z+9	; 0x09
 ac4:	e0 2d       	mov	r30, r0
 ac6:	09 95       	icall
 ac8:	89 2b       	or	r24, r25
 aca:	e1 f6       	brne	.-72     	; 0xa84 <fputc+0x10>
 acc:	d8 01       	movw	r26, r16
 ace:	16 96       	adiw	r26, 0x06	; 6
 ad0:	8d 91       	ld	r24, X+
 ad2:	9c 91       	ld	r25, X
 ad4:	17 97       	sbiw	r26, 0x07	; 7
 ad6:	01 96       	adiw	r24, 0x01	; 1
 ad8:	17 96       	adiw	r26, 0x07	; 7
 ada:	9c 93       	st	X, r25
 adc:	8e 93       	st	-X, r24
 ade:	16 97       	sbiw	r26, 0x06	; 6
 ae0:	ce 01       	movw	r24, r28
 ae2:	df 91       	pop	r29
 ae4:	cf 91       	pop	r28
 ae6:	1f 91       	pop	r17
 ae8:	0f 91       	pop	r16
 aea:	08 95       	ret

00000aec <__ultoa_invert>:
 aec:	fa 01       	movw	r30, r20
 aee:	aa 27       	eor	r26, r26
 af0:	28 30       	cpi	r18, 0x08	; 8
 af2:	51 f1       	breq	.+84     	; 0xb48 <__ultoa_invert+0x5c>
 af4:	20 31       	cpi	r18, 0x10	; 16
 af6:	81 f1       	breq	.+96     	; 0xb58 <__ultoa_invert+0x6c>
 af8:	e8 94       	clt
 afa:	6f 93       	push	r22
 afc:	6e 7f       	andi	r22, 0xFE	; 254
 afe:	6e 5f       	subi	r22, 0xFE	; 254
 b00:	7f 4f       	sbci	r23, 0xFF	; 255
 b02:	8f 4f       	sbci	r24, 0xFF	; 255
 b04:	9f 4f       	sbci	r25, 0xFF	; 255
 b06:	af 4f       	sbci	r26, 0xFF	; 255
 b08:	b1 e0       	ldi	r27, 0x01	; 1
 b0a:	3e d0       	rcall	.+124    	; 0xb88 <__ultoa_invert+0x9c>
 b0c:	b4 e0       	ldi	r27, 0x04	; 4
 b0e:	3c d0       	rcall	.+120    	; 0xb88 <__ultoa_invert+0x9c>
 b10:	67 0f       	add	r22, r23
 b12:	78 1f       	adc	r23, r24
 b14:	89 1f       	adc	r24, r25
 b16:	9a 1f       	adc	r25, r26
 b18:	a1 1d       	adc	r26, r1
 b1a:	68 0f       	add	r22, r24
 b1c:	79 1f       	adc	r23, r25
 b1e:	8a 1f       	adc	r24, r26
 b20:	91 1d       	adc	r25, r1
 b22:	a1 1d       	adc	r26, r1
 b24:	6a 0f       	add	r22, r26
 b26:	71 1d       	adc	r23, r1
 b28:	81 1d       	adc	r24, r1
 b2a:	91 1d       	adc	r25, r1
 b2c:	a1 1d       	adc	r26, r1
 b2e:	20 d0       	rcall	.+64     	; 0xb70 <__ultoa_invert+0x84>
 b30:	09 f4       	brne	.+2      	; 0xb34 <__ultoa_invert+0x48>
 b32:	68 94       	set
 b34:	3f 91       	pop	r19
 b36:	2a e0       	ldi	r18, 0x0A	; 10
 b38:	26 9f       	mul	r18, r22
 b3a:	11 24       	eor	r1, r1
 b3c:	30 19       	sub	r19, r0
 b3e:	30 5d       	subi	r19, 0xD0	; 208
 b40:	31 93       	st	Z+, r19
 b42:	de f6       	brtc	.-74     	; 0xafa <__ultoa_invert+0xe>
 b44:	cf 01       	movw	r24, r30
 b46:	08 95       	ret
 b48:	46 2f       	mov	r20, r22
 b4a:	47 70       	andi	r20, 0x07	; 7
 b4c:	40 5d       	subi	r20, 0xD0	; 208
 b4e:	41 93       	st	Z+, r20
 b50:	b3 e0       	ldi	r27, 0x03	; 3
 b52:	0f d0       	rcall	.+30     	; 0xb72 <__ultoa_invert+0x86>
 b54:	c9 f7       	brne	.-14     	; 0xb48 <__ultoa_invert+0x5c>
 b56:	f6 cf       	rjmp	.-20     	; 0xb44 <__ultoa_invert+0x58>
 b58:	46 2f       	mov	r20, r22
 b5a:	4f 70       	andi	r20, 0x0F	; 15
 b5c:	40 5d       	subi	r20, 0xD0	; 208
 b5e:	4a 33       	cpi	r20, 0x3A	; 58
 b60:	18 f0       	brcs	.+6      	; 0xb68 <__ultoa_invert+0x7c>
 b62:	49 5d       	subi	r20, 0xD9	; 217
 b64:	31 fd       	sbrc	r19, 1
 b66:	40 52       	subi	r20, 0x20	; 32
 b68:	41 93       	st	Z+, r20
 b6a:	02 d0       	rcall	.+4      	; 0xb70 <__ultoa_invert+0x84>
 b6c:	a9 f7       	brne	.-22     	; 0xb58 <__ultoa_invert+0x6c>
 b6e:	ea cf       	rjmp	.-44     	; 0xb44 <__ultoa_invert+0x58>
 b70:	b4 e0       	ldi	r27, 0x04	; 4
 b72:	a6 95       	lsr	r26
 b74:	97 95       	ror	r25
 b76:	87 95       	ror	r24
 b78:	77 95       	ror	r23
 b7a:	67 95       	ror	r22
 b7c:	ba 95       	dec	r27
 b7e:	c9 f7       	brne	.-14     	; 0xb72 <__ultoa_invert+0x86>
 b80:	00 97       	sbiw	r24, 0x00	; 0
 b82:	61 05       	cpc	r22, r1
 b84:	71 05       	cpc	r23, r1
 b86:	08 95       	ret
 b88:	9b 01       	movw	r18, r22
 b8a:	ac 01       	movw	r20, r24
 b8c:	0a 2e       	mov	r0, r26
 b8e:	06 94       	lsr	r0
 b90:	57 95       	ror	r21
 b92:	47 95       	ror	r20
 b94:	37 95       	ror	r19
 b96:	27 95       	ror	r18
 b98:	ba 95       	dec	r27
 b9a:	c9 f7       	brne	.-14     	; 0xb8e <__ultoa_invert+0xa2>
 b9c:	62 0f       	add	r22, r18
 b9e:	73 1f       	adc	r23, r19
 ba0:	84 1f       	adc	r24, r20
 ba2:	95 1f       	adc	r25, r21
 ba4:	a0 1d       	adc	r26, r0
 ba6:	08 95       	ret

00000ba8 <__prologue_saves__>:
 ba8:	2f 92       	push	r2
 baa:	3f 92       	push	r3
 bac:	4f 92       	push	r4
 bae:	5f 92       	push	r5
 bb0:	6f 92       	push	r6
 bb2:	7f 92       	push	r7
 bb4:	8f 92       	push	r8
 bb6:	9f 92       	push	r9
 bb8:	af 92       	push	r10
 bba:	bf 92       	push	r11
 bbc:	cf 92       	push	r12
 bbe:	df 92       	push	r13
 bc0:	ef 92       	push	r14
 bc2:	ff 92       	push	r15
 bc4:	0f 93       	push	r16
 bc6:	1f 93       	push	r17
 bc8:	cf 93       	push	r28
 bca:	df 93       	push	r29
 bcc:	cd b7       	in	r28, 0x3d	; 61
 bce:	de b7       	in	r29, 0x3e	; 62
 bd0:	ca 1b       	sub	r28, r26
 bd2:	db 0b       	sbc	r29, r27
 bd4:	0f b6       	in	r0, 0x3f	; 63
 bd6:	f8 94       	cli
 bd8:	de bf       	out	0x3e, r29	; 62
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	cd bf       	out	0x3d, r28	; 61
 bde:	09 94       	ijmp

00000be0 <__epilogue_restores__>:
 be0:	2a 88       	ldd	r2, Y+18	; 0x12
 be2:	39 88       	ldd	r3, Y+17	; 0x11
 be4:	48 88       	ldd	r4, Y+16	; 0x10
 be6:	5f 84       	ldd	r5, Y+15	; 0x0f
 be8:	6e 84       	ldd	r6, Y+14	; 0x0e
 bea:	7d 84       	ldd	r7, Y+13	; 0x0d
 bec:	8c 84       	ldd	r8, Y+12	; 0x0c
 bee:	9b 84       	ldd	r9, Y+11	; 0x0b
 bf0:	aa 84       	ldd	r10, Y+10	; 0x0a
 bf2:	b9 84       	ldd	r11, Y+9	; 0x09
 bf4:	c8 84       	ldd	r12, Y+8	; 0x08
 bf6:	df 80       	ldd	r13, Y+7	; 0x07
 bf8:	ee 80       	ldd	r14, Y+6	; 0x06
 bfa:	fd 80       	ldd	r15, Y+5	; 0x05
 bfc:	0c 81       	ldd	r16, Y+4	; 0x04
 bfe:	1b 81       	ldd	r17, Y+3	; 0x03
 c00:	aa 81       	ldd	r26, Y+2	; 0x02
 c02:	b9 81       	ldd	r27, Y+1	; 0x01
 c04:	ce 0f       	add	r28, r30
 c06:	d1 1d       	adc	r29, r1
 c08:	0f b6       	in	r0, 0x3f	; 63
 c0a:	f8 94       	cli
 c0c:	de bf       	out	0x3e, r29	; 62
 c0e:	0f be       	out	0x3f, r0	; 63
 c10:	cd bf       	out	0x3d, r28	; 61
 c12:	ed 01       	movw	r28, r26
 c14:	08 95       	ret

00000c16 <_exit>:
 c16:	f8 94       	cli

00000c18 <__stop_program>:
 c18:	ff cf       	rjmp	.-2      	; 0xc18 <__stop_program>
